// This code was generated by the Gardens Point Parser Generator
// Copyright (c) Wayne Kelly, QUT 2005-2007
// (see accompanying GPPGcopyright.rtf)

// GPPG version 1.2.0.115 (2007-11-7)
// options: lines


using System;
using System.Collections.Generic;
using System.Text;
using gppg;
using System.Collections;

namespace GPLEX.Parser
{
public enum Tokens {
    error=1,EOF=2,csKeyword=3,csIdent=4,csNumber=5,csLitstr=6,csLitchr=7,csOp=8,
    csBar=9,csDot=10,semi=11,csStar=12,csLT=13,csGT=14,comma=15,csSlash=16,
    csLBrac=17,csRBrac=18,csLPar=19,csRPar=20,csLBrace=21,csRBrace=22,verbatim=23,pattern=24,
    name=25,lCond=26,rCond=27,lxLBrace=28,lxRBrace=29,lxBar=30,defCommentS=31,defCommentE=32,
    csCommentL=33,csCommentS=34,csCommentE=35,usingTag=36,namespaceTag=37,optionTag=38,inclTag=39,exclTag=40,
    lPcBrace=41,rPcBrace=42,PCPC=43,lxIndent=44,lxEndIndent=45,maxParseToken=46,EOL=47,errTok=48,
    repErr=49};

// Abstract base class for GPLEX scanners
public abstract class ScanBase : IScanner<int,LexSpan> {
  private LexSpan __yylloc;
  public override LexSpan yylloc { get { return __yylloc; } set { __yylloc = value; } }
}

public partial class Parser: ShiftReduceParser<int, LexSpan>
{
  protected override void Initialize()
  {
    this.errToken = (int)Tokens.error;
    this.eofToken = (int)Tokens.EOF;

    states=new State[141];
    AddState(0,new State(new int[]{25,112,40,115,39,118,36,120,37,123,38,125,41,60,31,134,32,135,44,99,43,138,1,139},new int[]{-1,1,-3,3,-6,109,-9,137,-12,127,-13,128,-17,129,-14,136}));
    AddState(1,new State(new int[]{2,2}));
    AddState(2,new State(-1));
    AddState(3,new State(new int[]{41,60,44,99,34,18,35,105,1,107,26,-63,24,-63,43,-51,4,-51,33,-51,3,-51,5,-51,6,-51,7,-51,8,-51,10,-51,12,-51,13,-51,14,-51,11,-51,15,-51,16,-51,9,-51,21,-51,19,-51,17,-51,2,-51},new int[]{-4,4,-7,55,-21,57,-22,106,-12,59,-23,67,-24,68,-14,98,-19,104,-20,11}));
    AddState(4,new State(new int[]{34,18,4,22,35,23,33,24,3,25,5,26,6,27,7,28,8,29,10,30,12,31,13,32,14,33,11,34,15,35,16,36,9,37,21,38,19,42,17,46,1,54,2,-11},new int[]{-5,5,-8,6,-16,7,-28,51,-29,9,-19,10,-20,11,-11,19}));
    AddState(5,new State(-2));
    AddState(6,new State(-10));
    AddState(7,new State(new int[]{34,18,4,22,35,23,33,24,3,25,5,26,6,27,7,28,8,29,10,30,12,31,13,32,14,33,11,34,15,35,16,36,9,37,21,38,19,42,17,46,2,-67,41,-67,44,-67,26,-67,24,-67,1,-67,43,-67,29,-67,45,-67},new int[]{-28,8,-29,9,-19,10,-20,11,-11,19}));
    AddState(8,new State(-68));
    AddState(9,new State(-70));
    AddState(10,new State(-82));
    AddState(11,new State(new int[]{34,13,31,14,1,15,32,16,35,17},new int[]{-18,12}));
    AddState(12,new State(-45));
    AddState(13,new State(-47));
    AddState(14,new State(-48));
    AddState(15,new State(-46));
    AddState(16,new State(-40));
    AddState(17,new State(-41));
    AddState(18,new State(-49));
    AddState(19,new State(new int[]{10,20,34,-83,4,-83,35,-83,33,-83,3,-83,5,-83,6,-83,7,-83,8,-83,12,-83,13,-83,14,-83,11,-83,15,-83,16,-83,9,-83,21,-83,19,-83,17,-83,2,-83,41,-83,44,-83,26,-83,24,-83,1,-83,43,-83,29,-83,45,-83,22,-83,20,-83,18,-83,42,-83}));
    AddState(20,new State(new int[]{4,21}));
    AddState(21,new State(-81));
    AddState(22,new State(-80));
    AddState(23,new State(-84));
    AddState(24,new State(-85));
    AddState(25,new State(-86));
    AddState(26,new State(-87));
    AddState(27,new State(-88));
    AddState(28,new State(-89));
    AddState(29,new State(-90));
    AddState(30,new State(-91));
    AddState(31,new State(-92));
    AddState(32,new State(-93));
    AddState(33,new State(-94));
    AddState(34,new State(-95));
    AddState(35,new State(-96));
    AddState(36,new State(-97));
    AddState(37,new State(-98));
    AddState(38,new State(new int[]{22,39,1,53,34,18,4,22,35,23,33,24,3,25,5,26,6,27,7,28,8,29,10,30,12,31,13,32,14,33,11,34,15,35,16,36,9,37,21,38,19,42,17,46},new int[]{-16,40,-28,51,-29,9,-19,10,-20,11,-11,19}));
    AddState(39,new State(-71));
    AddState(40,new State(new int[]{22,41,34,18,4,22,35,23,33,24,3,25,5,26,6,27,7,28,8,29,10,30,12,31,13,32,14,33,11,34,15,35,16,36,9,37,21,38,19,42,17,46},new int[]{-28,8,-29,9,-19,10,-20,11,-11,19}));
    AddState(41,new State(-72));
    AddState(42,new State(new int[]{20,43,1,52,34,18,4,22,35,23,33,24,3,25,5,26,6,27,7,28,8,29,10,30,12,31,13,32,14,33,11,34,15,35,16,36,9,37,21,38,19,42,17,46},new int[]{-16,44,-28,51,-29,9,-19,10,-20,11,-11,19}));
    AddState(43,new State(-73));
    AddState(44,new State(new int[]{20,45,34,18,4,22,35,23,33,24,3,25,5,26,6,27,7,28,8,29,10,30,12,31,13,32,14,33,11,34,15,35,16,36,9,37,21,38,19,42,17,46},new int[]{-28,8,-29,9,-19,10,-20,11,-11,19}));
    AddState(45,new State(-74));
    AddState(46,new State(new int[]{18,47,1,50,34,18,4,22,35,23,33,24,3,25,5,26,6,27,7,28,8,29,10,30,12,31,13,32,14,33,11,34,15,35,16,36,9,37,21,38,19,42,17,46},new int[]{-16,48,-28,51,-29,9,-19,10,-20,11,-11,19}));
    AddState(47,new State(-75));
    AddState(48,new State(new int[]{18,49,34,18,4,22,35,23,33,24,3,25,5,26,6,27,7,28,8,29,10,30,12,31,13,32,14,33,11,34,15,35,16,36,9,37,21,38,19,42,17,46},new int[]{-28,8,-29,9,-19,10,-20,11,-11,19}));
    AddState(49,new State(-76));
    AddState(50,new State(-78));
    AddState(51,new State(-69));
    AddState(52,new State(-77));
    AddState(53,new State(-79));
    AddState(54,new State(-12));
    AddState(55,new State(new int[]{43,56,34,-7,4,-7,35,-7,33,-7,3,-7,5,-7,6,-7,7,-7,8,-7,10,-7,12,-7,13,-7,14,-7,11,-7,15,-7,16,-7,9,-7,21,-7,19,-7,17,-7,1,-7,2,-7}));
    AddState(56,new State(-6));
    AddState(57,new State(new int[]{41,60,44,99,34,18,35,105,43,-50,4,-50,33,-50,3,-50,5,-50,6,-50,7,-50,8,-50,10,-50,12,-50,13,-50,14,-50,11,-50,15,-50,16,-50,9,-50,21,-50,19,-50,17,-50,1,-50,2,-50,26,-63,24,-63},new int[]{-22,58,-12,59,-23,67,-24,68,-14,98,-19,104,-20,11}));
    AddState(58,new State(-52));
    AddState(59,new State(-54));
    AddState(60,new State(new int[]{42,61,1,64,34,18,4,22,35,23,33,24,3,25,5,26,6,27,7,28,8,29,10,30,12,31,13,32,14,33,11,34,15,35,16,36,9,37,21,38,19,42,17,46},new int[]{-16,62,-28,51,-29,9,-19,10,-20,11,-11,19}));
    AddState(61,new State(-33));
    AddState(62,new State(new int[]{42,63,34,18,4,22,35,23,33,24,3,25,5,26,6,27,7,28,8,29,10,30,12,31,13,32,14,33,11,34,15,35,16,36,9,37,21,38,19,42,17,46},new int[]{-28,8,-29,9,-19,10,-20,11,-11,19}));
    AddState(63,new State(-34));
    AddState(64,new State(new int[]{42,65,43,66}));
    AddState(65,new State(-35));
    AddState(66,new State(-36));
    AddState(67,new State(-55));
    AddState(68,new State(new int[]{26,82,24,95,1,97},new int[]{-25,69,-26,70}));
    AddState(69,new State(-59));
    AddState(70,new State(new int[]{24,71}));
    AddState(71,new State(new int[]{28,73,34,18,4,22,35,23,33,24,3,25,5,26,6,27,7,28,8,29,10,30,12,31,13,32,14,33,11,34,15,35,16,36,9,37,21,38,19,42,17,46,30,80,1,81},new int[]{-27,72,-8,79,-16,7,-28,51,-29,9,-19,10,-20,11,-11,19}));
    AddState(72,new State(-60));
    AddState(73,new State(new int[]{29,76,1,77,34,18,4,22,35,23,33,24,3,25,5,26,6,27,7,28,8,29,10,30,12,31,13,32,14,33,11,34,15,35,16,36,9,37,21,38,19,42,17,46},new int[]{-8,74,-16,7,-28,51,-29,9,-19,10,-20,11,-11,19}));
    AddState(74,new State(new int[]{29,75}));
    AddState(75,new State(-99));
    AddState(76,new State(-102));
    AddState(77,new State(new int[]{29,78}));
    AddState(78,new State(-103));
    AddState(79,new State(-100));
    AddState(80,new State(-101));
    AddState(81,new State(-104));
    AddState(82,new State(new int[]{12,85,1,87,25,93,5,94},new int[]{-10,83,-15,89}));
    AddState(83,new State(new int[]{27,84}));
    AddState(84,new State(-64));
    AddState(85,new State(new int[]{27,86}));
    AddState(86,new State(-65));
    AddState(87,new State(new int[]{27,88}));
    AddState(88,new State(-66));
    AddState(89,new State(new int[]{15,90,27,-27,43,-27,25,-27,40,-27,39,-27,36,-27,37,-27,38,-27,41,-27,31,-27,32,-27,44,-27}));
    AddState(90,new State(new int[]{25,91,1,92}));
    AddState(91,new State(-29));
    AddState(92,new State(-32));
    AddState(93,new State(-30));
    AddState(94,new State(-31));
    AddState(95,new State(new int[]{28,73,34,18,4,22,35,23,33,24,3,25,5,26,6,27,7,28,8,29,10,30,12,31,13,32,14,33,11,34,15,35,16,36,9,37,21,38,19,42,17,46,30,80,1,81},new int[]{-27,96,-8,79,-16,7,-28,51,-29,9,-19,10,-20,11,-11,19}));
    AddState(96,new State(-61));
    AddState(97,new State(-62));
    AddState(98,new State(-56));
    AddState(99,new State(new int[]{1,102,34,18,4,22,35,23,33,24,3,25,5,26,6,27,7,28,8,29,10,30,12,31,13,32,14,33,11,34,15,35,16,36,9,37,21,38,19,42,17,46},new int[]{-8,100,-16,7,-28,51,-29,9,-19,10,-20,11,-11,19}));
    AddState(100,new State(new int[]{45,101}));
    AddState(101,new State(-25));
    AddState(102,new State(new int[]{45,103}));
    AddState(103,new State(-26));
    AddState(104,new State(-57));
    AddState(105,new State(-58));
    AddState(106,new State(-53));
    AddState(107,new State(new int[]{43,108,34,-9,4,-9,35,-9,33,-9,3,-9,5,-9,6,-9,7,-9,8,-9,10,-9,12,-9,13,-9,14,-9,11,-9,15,-9,16,-9,9,-9,21,-9,19,-9,17,-9,1,-9,2,-9}));
    AddState(108,new State(-8));
    AddState(109,new State(new int[]{43,110,25,112,40,115,39,118,36,120,37,123,38,125,41,60,31,134,32,135,44,99},new int[]{-9,111,-12,127,-13,128,-17,129,-14,136}));
    AddState(110,new State(-3));
    AddState(111,new State(-13));
    AddState(112,new State(new int[]{23,113,24,114}));
    AddState(113,new State(-15));
    AddState(114,new State(-16));
    AddState(115,new State(new int[]{25,93,5,94,1,117},new int[]{-10,116,-15,89}));
    AddState(116,new State(-17));
    AddState(117,new State(-28));
    AddState(118,new State(new int[]{25,93,5,94,1,117},new int[]{-10,119,-15,89}));
    AddState(119,new State(-18));
    AddState(120,new State(new int[]{4,22},new int[]{-11,121}));
    AddState(121,new State(new int[]{11,122,10,20}));
    AddState(122,new State(-19));
    AddState(123,new State(new int[]{4,22},new int[]{-11,124}));
    AddState(124,new State(new int[]{10,20,43,-20,25,-20,40,-20,39,-20,36,-20,37,-20,38,-20,41,-20,31,-20,32,-20,44,-20}));
    AddState(125,new State(new int[]{23,126}));
    AddState(126,new State(-21));
    AddState(127,new State(-22));
    AddState(128,new State(-23));
    AddState(129,new State(new int[]{31,131,34,132,1,133,32,16,35,17},new int[]{-18,130}));
    AddState(130,new State(-37));
    AddState(131,new State(-42));
    AddState(132,new State(-43));
    AddState(133,new State(-39));
    AddState(134,new State(-44));
    AddState(135,new State(-38));
    AddState(136,new State(-24));
    AddState(137,new State(-14));
    AddState(138,new State(-4));
    AddState(139,new State(new int[]{43,140}));
    AddState(140,new State(-5));

    rules=new Rule[105];
    rules[1]=new Rule(-2, new int[]{-1,2});
    rules[2]=new Rule(-1, new int[]{-3,-4,-5});
    rules[3]=new Rule(-3, new int[]{-6,43});
    rules[4]=new Rule(-3, new int[]{43});
    rules[5]=new Rule(-3, new int[]{1,43});
    rules[6]=new Rule(-4, new int[]{-7,43});
    rules[7]=new Rule(-4, new int[]{-7});
    rules[8]=new Rule(-4, new int[]{1,43});
    rules[9]=new Rule(-4, new int[]{1});
    rules[10]=new Rule(-5, new int[]{-8});
    rules[11]=new Rule(-5, new int[]{});
    rules[12]=new Rule(-5, new int[]{1});
    rules[13]=new Rule(-6, new int[]{-6,-9});
    rules[14]=new Rule(-6, new int[]{-9});
    rules[15]=new Rule(-9, new int[]{25,23});
    rules[16]=new Rule(-9, new int[]{25,24});
    rules[17]=new Rule(-9, new int[]{40,-10});
    rules[18]=new Rule(-9, new int[]{39,-10});
    rules[19]=new Rule(-9, new int[]{36,-11,11});
    rules[20]=new Rule(-9, new int[]{37,-11});
    rules[21]=new Rule(-9, new int[]{38,23});
    rules[22]=new Rule(-9, new int[]{-12});
    rules[23]=new Rule(-9, new int[]{-13});
    rules[24]=new Rule(-9, new int[]{-14});
    rules[25]=new Rule(-14, new int[]{44,-8,45});
    rules[26]=new Rule(-14, new int[]{44,1,45});
    rules[27]=new Rule(-10, new int[]{-15});
    rules[28]=new Rule(-10, new int[]{1});
    rules[29]=new Rule(-15, new int[]{-15,15,25});
    rules[30]=new Rule(-15, new int[]{25});
    rules[31]=new Rule(-15, new int[]{5});
    rules[32]=new Rule(-15, new int[]{-15,15,1});
    rules[33]=new Rule(-12, new int[]{41,42});
    rules[34]=new Rule(-12, new int[]{41,-16,42});
    rules[35]=new Rule(-12, new int[]{41,1,42});
    rules[36]=new Rule(-12, new int[]{41,1,43});
    rules[37]=new Rule(-13, new int[]{-17,-18});
    rules[38]=new Rule(-13, new int[]{32});
    rules[39]=new Rule(-13, new int[]{-17,1});
    rules[40]=new Rule(-18, new int[]{32});
    rules[41]=new Rule(-18, new int[]{35});
    rules[42]=new Rule(-17, new int[]{-17,31});
    rules[43]=new Rule(-17, new int[]{-17,34});
    rules[44]=new Rule(-17, new int[]{31});
    rules[45]=new Rule(-19, new int[]{-20,-18});
    rules[46]=new Rule(-19, new int[]{-20,1});
    rules[47]=new Rule(-20, new int[]{-20,34});
    rules[48]=new Rule(-20, new int[]{-20,31});
    rules[49]=new Rule(-20, new int[]{34});
    rules[50]=new Rule(-7, new int[]{-21});
    rules[51]=new Rule(-7, new int[]{});
    rules[52]=new Rule(-21, new int[]{-21,-22});
    rules[53]=new Rule(-21, new int[]{-22});
    rules[54]=new Rule(-22, new int[]{-12});
    rules[55]=new Rule(-22, new int[]{-23});
    rules[56]=new Rule(-22, new int[]{-14});
    rules[57]=new Rule(-22, new int[]{-19});
    rules[58]=new Rule(-22, new int[]{35});
    rules[59]=new Rule(-23, new int[]{-24,-25});
    rules[60]=new Rule(-25, new int[]{-26,24,-27});
    rules[61]=new Rule(-25, new int[]{24,-27});
    rules[62]=new Rule(-25, new int[]{1});
    rules[63]=new Rule(-24, new int[]{});
    rules[64]=new Rule(-26, new int[]{26,-10,27});
    rules[65]=new Rule(-26, new int[]{26,12,27});
    rules[66]=new Rule(-26, new int[]{26,1,27});
    rules[67]=new Rule(-8, new int[]{-16});
    rules[68]=new Rule(-16, new int[]{-16,-28});
    rules[69]=new Rule(-16, new int[]{-28});
    rules[70]=new Rule(-28, new int[]{-29});
    rules[71]=new Rule(-28, new int[]{21,22});
    rules[72]=new Rule(-28, new int[]{21,-16,22});
    rules[73]=new Rule(-28, new int[]{19,20});
    rules[74]=new Rule(-28, new int[]{19,-16,20});
    rules[75]=new Rule(-28, new int[]{17,18});
    rules[76]=new Rule(-28, new int[]{17,-16,18});
    rules[77]=new Rule(-28, new int[]{19,1});
    rules[78]=new Rule(-28, new int[]{17,1});
    rules[79]=new Rule(-28, new int[]{21,1});
    rules[80]=new Rule(-11, new int[]{4});
    rules[81]=new Rule(-11, new int[]{-11,10,4});
    rules[82]=new Rule(-29, new int[]{-19});
    rules[83]=new Rule(-29, new int[]{-11});
    rules[84]=new Rule(-29, new int[]{35});
    rules[85]=new Rule(-29, new int[]{33});
    rules[86]=new Rule(-29, new int[]{3});
    rules[87]=new Rule(-29, new int[]{5});
    rules[88]=new Rule(-29, new int[]{6});
    rules[89]=new Rule(-29, new int[]{7});
    rules[90]=new Rule(-29, new int[]{8});
    rules[91]=new Rule(-29, new int[]{10});
    rules[92]=new Rule(-29, new int[]{12});
    rules[93]=new Rule(-29, new int[]{13});
    rules[94]=new Rule(-29, new int[]{14});
    rules[95]=new Rule(-29, new int[]{11});
    rules[96]=new Rule(-29, new int[]{15});
    rules[97]=new Rule(-29, new int[]{16});
    rules[98]=new Rule(-29, new int[]{9});
    rules[99]=new Rule(-27, new int[]{28,-8,29});
    rules[100]=new Rule(-27, new int[]{-8});
    rules[101]=new Rule(-27, new int[]{30});
    rules[102]=new Rule(-27, new int[]{28,29});
    rules[103]=new Rule(-27, new int[]{28,1,29});
    rules[104]=new Rule(-27, new int[]{1});

    nonTerminals = new string[] {"", "Program", "$accept", "DefinitionSection", 
      "RulesSection", "UserCodeSection", "DefinitionSeq", "Rules", "CSharp", 
      "Definition", "NameList", "DottedName", "PcBraceSection", "DefComment", 
      "IndentedCode", "NameSeq", "CSharpN", "DefComStart", "CommentEnd", "BlockComment", 
      "CsComStart", "RuleList", "Rule", "Production", "ListInit", "ARule", "StartCondition", 
      "Action", "WFCSharpN", "NonPairedToken", };
  }

  protected override void DoAction(int action)
  {
    switch (action)
    {
      case 3: // DefinitionSection -> DefinitionSeq PCPC 
#line 28 "gplex.y"
			{ 
              typedeclOK = false;
              if (aast.nameString == null) handler.ListError(location_stack.array[location_stack.top-1], 73); 
            }
        break;
      case 5: // DefinitionSection -> error PCPC 
#line 33 "gplex.y"
			{ handler.ListError(location_stack.array[location_stack.top-2], 62, "%%"); }
        break;
      case 6: // RulesSection -> Rules PCPC 
#line 37 "gplex.y"
			{ typedeclOK = true; }
        break;
      case 8: // RulesSection -> error PCPC 
#line 39 "gplex.y"
			{ handler.ListError(location_stack.array[location_stack.top-2], 62, "%%"); typedeclOK = true; }
        break;
      case 9: // RulesSection -> error 
#line 40 "gplex.y"
			{ handler.ListError(location_stack.array[location_stack.top-1], 62, "EOF"); }
        break;
      case 10: // UserCodeSection -> CSharp 
#line 44 "gplex.y"
			{ aast.UserCode = location_stack.array[location_stack.top-1]; }
        break;
      case 11: // UserCodeSection -> 
#line 45 "gplex.y"
			{  /* empty */  }
        break;
      case 12: // UserCodeSection -> error 
#line 46 "gplex.y"
			{ handler.ListError(location_stack.array[location_stack.top-1], 62, "EOF"); }
        break;
      case 15: // Definition -> name verbatim 
#line 55 "gplex.y"
			{ AddLexCategory(location_stack.array[location_stack.top-2], location_stack.array[location_stack.top-1]); }
        break;
      case 16: // Definition -> name pattern 
#line 56 "gplex.y"
			{ AddLexCategory(location_stack.array[location_stack.top-2], location_stack.array[location_stack.top-1]); }
        break;
      case 17: // Definition -> exclTag NameList 
#line 57 "gplex.y"
			{ AddNames(true); }
        break;
      case 18: // Definition -> inclTag NameList 
#line 58 "gplex.y"
			{ AddNames(false); }
        break;
      case 19: // Definition -> usingTag DottedName semi 
#line 59 "gplex.y"
			{ aast.usingStrs.Add(location_stack.array[location_stack.top-2].Merge(location_stack.array[location_stack.top-1])); }
        break;
      case 20: // Definition -> namespaceTag DottedName 
#line 60 "gplex.y"
			{ aast.nameString = location_stack.array[location_stack.top-1]; }
        break;
      case 21: // Definition -> optionTag verbatim 
#line 61 "gplex.y"
			{ ParseOption(location_stack.array[location_stack.top-1]); }
        break;
      case 22: // Definition -> PcBraceSection 
#line 62 "gplex.y"
			{ aast.AddCodeSpan(Dest,location_stack.array[location_stack.top-1]); }
        break;
      case 23: // Definition -> DefComment 
#line 63 "gplex.y"
			{ aast.AddCodeSpan(Dest,location_stack.array[location_stack.top-1]); }
        break;
      case 24: // Definition -> IndentedCode 
#line 64 "gplex.y"
			{ aast.AddCodeSpan(Dest,location_stack.array[location_stack.top-1]); }
        break;
      case 25: // IndentedCode -> lxIndent CSharp lxEndIndent 
#line 69 "gplex.y"
			{ yyloc = location_stack.array[location_stack.top-2]; }
        break;
      case 26: // IndentedCode -> lxIndent error lxEndIndent 
#line 70 "gplex.y"
			{ handler.ListError(location_stack.array[location_stack.top-2], 64); }
        break;
      case 28: // NameList -> error 
#line 75 "gplex.y"
			{ handler.ListError(location_stack.array[location_stack.top-1], 67); }
        break;
      case 29: // NameSeq -> NameSeq comma name 
#line 79 "gplex.y"
			{ AddName(location_stack.array[location_stack.top-1]); }
        break;
      case 30: // NameSeq -> name 
#line 80 "gplex.y"
			{ AddName(location_stack.array[location_stack.top-1]); }
        break;
      case 31: // NameSeq -> csNumber 
#line 81 "gplex.y"
			{ AddName(location_stack.array[location_stack.top-1]); }
        break;
      case 32: // NameSeq -> NameSeq comma error 
#line 82 "gplex.y"
			{ handler.ListError(location_stack.array[location_stack.top-2], 67); }
        break;
      case 33: // PcBraceSection -> lPcBrace rPcBrace 
#line 86 "gplex.y"
			{ yyloc = Blank; /* skip blank lines */ }
        break;
      case 34: // PcBraceSection -> lPcBrace CSharpN rPcBrace 
#line 87 "gplex.y"
			{ yyloc = location_stack.array[location_stack.top-2]; }
        break;
      case 35: // PcBraceSection -> lPcBrace error rPcBrace 
#line 88 "gplex.y"
			{ handler.ListError(location_stack.array[location_stack.top-2], 62, "%}"); }
        break;
      case 36: // PcBraceSection -> lPcBrace error PCPC 
#line 89 "gplex.y"
			{ handler.ListError(location_stack.array[location_stack.top-2], 62, "%%"); }
        break;
      case 39: // DefComment -> DefComStart error 
#line 96 "gplex.y"
			{ handler.ListError(location_stack.array[location_stack.top-2], 60); }
        break;
      case 46: // BlockComment -> CsComStart error 
#line 112 "gplex.y"
			{ handler.ListError(location_stack.array[location_stack.top-2], 60); }
        break;
      case 50: // Rules -> RuleList 
#line 122 "gplex.y"
			{ rb.FinalizeCode(aast); aast.FixupBarActions(); }
        break;
      case 54: // Rule -> PcBraceSection 
#line 132 "gplex.y"
			{ rb.AddSpan(location_stack.array[location_stack.top-1]); }
        break;
      case 56: // Rule -> IndentedCode 
#line 134 "gplex.y"
			{ rb.AddSpan(location_stack.array[location_stack.top-1]); }
        break;
      case 57: // Rule -> BlockComment 
#line 135 "gplex.y"
			{ /* ignore */ }
        break;
      case 58: // Rule -> csCommentE 
#line 136 "gplex.y"
			{ /* ignore */ }
        break;
      case 59: // Production -> ListInit ARule 
#line 140 "gplex.y"
			{
			int thisLine = location_stack.array[location_stack.top-1].sLin;
			rb.LLine = thisLine;
			if (rb.FLine == 0) rb.FLine = thisLine;
		  }
        break;
      case 60: // ARule -> StartCondition pattern Action 
#line 148 "gplex.y"
			{
			RuleDesc rule = new RuleDesc(location_stack.array[location_stack.top-2], location_stack.array[location_stack.top-1], scList, isBar);
			aast.ruleList.Add(rule);
			rule.ParseRE(aast);
		  }
        break;
      case 61: // ARule -> pattern Action 
#line 153 "gplex.y"
			{
			RuleDesc rule; 
			// scList.Add(StartState.initState);
			// rule = new RuleDesc(@1, @2, scList, isBar);
			rule = new RuleDesc(location_stack.array[location_stack.top-2], location_stack.array[location_stack.top-1], null, isBar); 
			aast.ruleList.Add(rule);
			rule.ParseRE(aast); 
		  }
        break;
      case 62: // ARule -> error 
#line 161 "gplex.y"
			{ handler.ListError(location_stack.array[location_stack.top-1], 68); }
        break;
      case 63: // ListInit -> 
#line 165 "gplex.y"
			{ scList = new List<StartState>(); isBar = false; }
        break;
      case 64: // StartCondition -> lCond NameList rCond 
#line 169 "gplex.y"
			{ CheckScList(scList); }
        break;
      case 65: // StartCondition -> lCond csStar rCond 
#line 170 "gplex.y"
			{ scList.Add(StartState.allState); }
        break;
      case 66: // StartCondition -> lCond error rCond 
#line 171 "gplex.y"
			{ handler.ListError(yyloc, 67); }
        break;
      case 77: // WFCSharpN -> csLPar error 
#line 191 "gplex.y"
			{ handler.ListError(location_stack.array[location_stack.top-1], 61, "')'"); }
        break;
      case 78: // WFCSharpN -> csLBrac error 
#line 192 "gplex.y"
			{ handler.ListError(location_stack.array[location_stack.top-1], 61, "']'"); }
        break;
      case 79: // WFCSharpN -> csLBrace error 
#line 193 "gplex.y"
			{ handler.ListError(location_stack.array[location_stack.top-1], 61, "'}'"); }
        break;
      case 80: // DottedName -> csIdent 
#line 197 "gplex.y"
			{ /* skip1 */ }
        break;
      case 81: // DottedName -> DottedName csDot csIdent 
#line 198 "gplex.y"
			{ /* skip2 */ }
        break;
      case 86: // NonPairedToken -> csKeyword 
#line 206 "gplex.y"
			{ 
        string text = aast.scanner.yytext;
        if (text.Equals("using")) {
            handler.ListError(location_stack.array[location_stack.top-1], 56);
        } else if (text.Equals("namespace")) {
            handler.ListError(location_stack.array[location_stack.top-1], 57);
        } else {
            if ((text.Equals("class") || text.Equals("struct") ||
                 text.Equals("enum")) && !typedeclOK) handler.ListError(location_stack.array[location_stack.top-1],58);
        }
      }
        break;
      case 99: // Action -> lxLBrace CSharp lxRBrace 
#line 232 "gplex.y"
			{ yyloc = location_stack.array[location_stack.top-2]; }
        break;
      case 101: // Action -> lxBar 
#line 234 "gplex.y"
			{ isBar = true; }
        break;
      case 103: // Action -> lxLBrace error lxRBrace 
#line 236 "gplex.y"
			{ handler.ListError(yyloc, 65); }
        break;
      case 104: // Action -> error 
#line 237 "gplex.y"
			{ handler.ListError(location_stack.array[location_stack.top-1], 63); }
        break;
    }
  }

  protected override string TerminalToString(int terminal)
  {
    if (((Tokens)terminal).ToString() != terminal.ToString())
      return ((Tokens)terminal).ToString();
    else
      return CharToString((char)terminal);
  }

#line 240 "gplex.y"
















}
}
