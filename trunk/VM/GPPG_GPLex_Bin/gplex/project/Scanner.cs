//
//  This CSharp output file generated by Gardens Point LEX
//  Version:  0.6.1.183 (2007-09-01)
//  Machine:  ATTIC-1
//  DateTime: 13/11/2007 3:50:51 PM
//  UserName: john
//  GPLEX input file <gplex.lex>
//  GPLEX frame file <gplexx.frame>
//
//  Option settings: verbose, parser, stack, minimize, compressnext
//

#define BACKUP
#define LEFTANCHORS
#define STACK
//
// gplexx.frame
// Version 0.6.2 of 13-November-2007
// Derived from gplex.frame version of 2-September-2006. 
// Left and Right Anchored state support.
// Start condition stack. Two generic params.
// Using fixed length context handling for right anchors
//
using System;
using System.IO;
using System.Collections.Generic;
#if !STANDALONE
using gppg;
#endif

using System.Collections;
using System.Text;
using GPLEX.Parser;

namespace GPLEX.Lexer
{   
    /// <summary>
    /// Summary Canonical example of GPLEX automaton
    /// </summary>
    
#if STANDALONE
    //
    // These are the dummy declarations for stand-alone GPLEX applications
    // normally these declarations would come from the parser.
    // If you declare /noparser, or %option noparser then you get this.
    //

    public enum Tokens
    { 
      EOF = 0, maxParseToken = int.MaxValue 
      // must have at least these two, values are almost arbitrary
    }

    public abstract class ScanBase
    {
        public abstract int yylex();
#if BABEL
        protected abstract int CurrentSc { get; set; }
        // EolState is the 32-bit of state data persisted at 
        // the end of each line for Visual Studio colorization.  
        // The default is to return CurrentSc.  You must override
        // this if you want more complicated behavior.
        public virtual int EolState { 
            get { return CurrentSc; }
            set { CurrentSc = value; } 
        }
    }
    
    public interface IColorScan
    {
        void SetSource(string source, int offset);
        int GetNext(ref int state, out int start, out int end);
#endif // BABEL
    }

#endif // STANDALONE

    public abstract class ScanBuff
    {
        public const int EOF = -1;
        public abstract int Pos { get; set; }
        public abstract int Read();
        public abstract int Peek();
        public abstract int ReadPos { get; }
        public abstract string GetString(int b, int e);
    }
    
    // If the compiler can't find ScanBase maybe you need to run
    // GPPG with the /gplex option, or GPLEX with /noparser
#if BABEL
    public sealed partial class Scanner : ScanBase, IColorScan
    {
        public ScanBuff buffer;
        int currentScOrd;  // start condition ordinal
        
        protected override int CurrentSc 
        {
             // The current start state is a property
             // to try to avoid the user error of setting
             // scState but forgetting to update the FSA
             // start state "currentStart"
             //
             get { return currentScOrd; }  // i.e. return YY_START;
             set { currentScOrd = value;   // i.e. BEGIN(value);
                   currentStart = startState[value]; }
        }
#else  // BABEL
    public sealed partial class Scanner : ScanBase
    {
        public ScanBuff buffer;
        int currentScOrd;  // start condition ordinal
#endif // BABEL
        
        private static int GetMaxParseToken() {
            System.Reflection.FieldInfo f = typeof(Tokens).GetField("maxParseToken");
            return (f == null ? int.MaxValue : (int)f.GetValue(null));
        }
        
        static int parserMax = GetMaxParseToken();
        
        enum Result {accept, noMatch, contextFound};

        const int maxAccept = 80;
        const int initial = 81;
        const int eofNum = 0;
        const int goStart = -1;
        const int INITIAL = 0;
        const int RULES = 1;
        const int UCODE = 2;
        const int BCODE = 3;
        const int LCODE = 4;
        const int INDNT = 5;
        const int CMMNT = 6;
        const int SMACT = 7;
        const int XPEOL = 8;
        const int REGEX = 9;
        const int NMLST = 10;
        const int SPACE = 11;
        const int VRBTM = 12;

// User code from gplex.lex
        
        public ErrorHandler yyhdlr = null;

        Tokens GetIdToken(string str)
        {
            switch (str[0])
            {
                case 'a':
                    if (str.Equals("abstract") || str.Equals("as"))
                        return Tokens.csKeyword;
                    break;
                case 'b':
                    if (str.Equals("base") || str.Equals("bool") ||
                        str.Equals("break") || str.Equals("byte"))
                        return Tokens.csKeyword;
                    break;
                case 'c':
                    if (str.Equals("case") || str.Equals("catch")
                     || str.Equals("char") || str.Equals("checked")
                     || str.Equals("class") || str.Equals("const")
                     || str.Equals("continue"))
                        return Tokens.csKeyword;
                    break;
                case 'd':
                    if (str.Equals("decimal") || str.Equals("default")
                     || str.Equals("delegate") || str.Equals("do")
                     || str.Equals("double"))
                        return Tokens.csKeyword;
                    break;
                case 'e':
                    if (str.Equals("else") || str.Equals("enum")
                     || str.Equals("event") || str.Equals("explicit")
                     || str.Equals("extern"))
                        return Tokens.csKeyword;
                    break;
                case 'f':
                    if (str.Equals("false") || str.Equals("finally")
                     || str.Equals("fixed") || str.Equals("float")
                     || str.Equals("for") || str.Equals("foreach"))
                        return Tokens.csKeyword;
                    break;
                case 'g':
                    if (str.Equals("goto"))
                        return Tokens.csKeyword;
                    break;
                case 'i':
                    if (str.Equals("if") 
                     || str.Equals("int") || str.Equals("implicit")
                     || str.Equals("in") || str.Equals("interface")
                     || str.Equals("internal") || str.Equals("is"))
                        return Tokens.csKeyword;
                    break;
                case 'l':
                    if (str.Equals("lock") || str.Equals("long"))
                        return Tokens.csKeyword;
                    break;
                case 'n':
                    if (str.Equals("namespace") || str.Equals("new")
                     || str.Equals("null"))
                        return Tokens.csKeyword;
                    break;
                case 'o':
                    if (str.Equals("object") || str.Equals("operator")
                     || str.Equals("out") || str.Equals("override"))
                        return Tokens.csKeyword;
                    break;
                case 'p':
                    if (str.Equals("params") || str.Equals("private")
                     || str.Equals("protected") || str.Equals("public"))
                        return Tokens.csKeyword;
                    break;
                case 'r':
                    if (str.Equals("readonly") || str.Equals("ref")
                     || str.Equals("return"))
                        return Tokens.csKeyword;
                    break;
                case 's':
                    if (str.Equals("sbyte") || str.Equals("sealed")
                     || str.Equals("short") || str.Equals("sizeof")
                     || str.Equals("stackalloc") || str.Equals("static")
                     || str.Equals("string") || str.Equals("struct")
                     || str.Equals("switch"))
                        return Tokens.csKeyword;
                    break;
                case 't':
                    if (str.Equals("this") || str.Equals("throw")
                     || str.Equals("true") || str.Equals("try")
                     || str.Equals("typeof"))
                        return Tokens.csKeyword;
                    break;
                case 'u':
                    if (str.Equals("uint") || str.Equals("ulong")
                     || str.Equals("unchecked") || str.Equals("unsafe")
                     || str.Equals("ushort") || str.Equals("using"))
                        return Tokens.csKeyword;
                    break;
                case 'v':
                    if (str.Equals("virtual") || str.Equals("void"))
                        return Tokens.csKeyword;
                    break;
                case 'w':
                    if (str.Equals("while") || str.Equals("where"))
                        return Tokens.csKeyword;
                    break;
            }
            return Tokens.csIdent;
        }
        
        Tokens GetTagToken(string str)
        {
            switch (str)
            {
                case "%x":
                    yy_push_state(NMLST); return Tokens.exclTag;
                case "%s":
                    yy_push_state(NMLST); return Tokens.inclTag;
                case "%using":
                    yy_push_state(LCODE); return Tokens.usingTag;
                case "%namespace":
                    yy_push_state(LCODE); return Tokens.namespaceTag;
                case "%option":
                    yy_push_state(VRBTM); return Tokens.optionTag;
                default:
                    Error(77, TokenSpan()); return Tokens.repErr;
            }
        }
        
        public override void yyerror(string format, params object[] args)
        { if (yyhdlr != null) yyhdlr.ListError(TokenSpan(), 1, format); }   

        internal void Error(int n, LexSpan s)
        {
            if (yyhdlr != null) yyhdlr.ListError(s, n);
        }
        
        internal LexSpan TokenSpan() 
        { return new LexSpan(tokLin, tokCol, tokELin, tokECol, tokPos, tokEPos, buffer); }
        
        public string StateStr(int s)
        {
            switch (s) 
            {
        case INITIAL: return "0";
        case RULES: return "RULES";
        case UCODE: return "UCODE";
        case LCODE: return "LCODE";
        case BCODE: return "BCODE";
        case INDNT: return "INDNT";
        case CMMNT: return "CMMNT";
        case SMACT: return "SMACT";
        case XPEOL: return "XPEOL";
        case REGEX: return "REGEX";
        case NMLST: return "NMLST";
        case SPACE: return "SPACE";
        case VRBTM: return "VRBTM";
        default: return "state " + s.ToString();
            }
         }
         
         public string StateStack(int s)
         {
             string rslt = StateStr(s);
             int[] arry = scStack.ToArray();
             for (int i = 0; i < scStack.Count; i++)
                 rslt += (":" + StateStr(arry[i]));
             return rslt;
          }
             
         int depth = 0;
         
         // End user code from definitions section
        int state;
        int currentStart = initial;
        int chr;           // last character read
        int cNum = 0;      // ordinal number of chr
        int lNum = 0;      // current line number
        int lineStartNum;  // ordinal number at start of line
        //
        // The following instance variables are used, among other
        // things, for constructing the yylloc location objects.
        //
        int tokPos;        // buffer position at start of token
        int tokNum;        // ordinal number of first character
        int tokLen;        // number of characters in token
        int tokCol;        // zero-based column number at start of token
        int tokLin;        // line number at start of token
        int tokEPos;       // buffer position at end of token
        int tokECol;       // column number at end of token
        int tokELin;       // line number at end of token
        string tokTxt;     // lazily constructed text of token
#if STACK          
        private Stack<int> scStack = new Stack<int>();
#endif // STACK

#region ScannerTables
    struct Table {
        public int min; public int rng; public int dflt;
        public sbyte[] nxt;
        public Table(int m, int x, int d, sbyte[] n) {
            min = m; rng = x; dflt = d; nxt = n;
        }
    };

    static int[] startState = {81, 84, 91, 101, 102, 91, 
        56, 104, 105, 106, 117, 118, 119, 0};

   static int[] anchorState = {82, 85, 92, 101, 102, 103, 
        56, 104, 105, 106, 117, 118, 119, 0};

    static Table[] NxS = new Table[120];

    static Scanner() {
    NxS[0] = new Table(0, 0, 0, null); // Shortest string ""
    NxS[1] = new Table(0, 0, -1, null); // Shortest string "\001"
    NxS[2] = new Table(0, 0, -1, null); // Shortest string "\n"
    NxS[3] = // Shortest string "\r"
      new Table(10, 1, -1, new sbyte[] {2});
    NxS[4] = // Shortest string "^%"
      new Table(37, 89, -1, new sbyte[] {10, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 
          11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 
          -1, -1, -1, -1, 11, -1, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 
          11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 
          12, -1, 13});
    NxS[5] = // Shortest string "^/"
      new Table(42, 1, -1, new sbyte[] {7});
    NxS[6] = // Shortest string "^A"
      new Table(48, 75, -1, new sbyte[] {6, 6, 6, 6, 6, 6, 
          6, 6, 6, 6, -1, -1, -1, -1, -1, -1, -1, 6, 6, 6, 6, 6, 
          6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 
          6, 6, 6, 6, 6, -1, -1, -1, -1, 6, -1, 6, 6, 6, 6, 6, 
          6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 
          6, 6, 6, 6, 6});
    NxS[7] = // Shortest string "^/*"
      new Table(10, 33, 7, new sbyte[] {-1, 7, 7, -1, 7, 7, 
          7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 
          7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 8});
    NxS[8] = // Shortest string "^/**"
      new Table(42, 6, -1, new sbyte[] {8, -1, -1, -1, -1, 9});
    NxS[9] = new Table(0, 0, -1, null); // Shortest string "^/**/"
    NxS[10] = new Table(0, 0, -1, null); // Shortest string "^%%"
    NxS[11] = // Shortest string "^%A"
      new Table(48, 75, -1, new sbyte[] {11, 11, 11, 11, 11, 11, 
          11, 11, 11, 11, -1, -1, -1, -1, -1, -1, -1, 11, 11, 11, 11, 11, 
          11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 
          11, 11, 11, 11, 11, -1, -1, -1, -1, 11, -1, 11, 11, 11, 11, 11, 
          11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 
          11, 11, 11, 11, 11});
    NxS[12] = new Table(0, 0, -1, null); // Shortest string "^%{"
    NxS[13] = new Table(0, 0, -1, null); // Shortest string "^%}"
    NxS[14] = new Table(0, 0, -1, null); // Shortest string "^\t\001"
    NxS[15] = new Table(0, 0, -1, null); // Shortest string "^\001"
    NxS[16] = // Shortest string "^%"
      new Table(37, 89, -1, new sbyte[] {23, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          12, -1, 13});
    NxS[17] = // Shortest string "^/"
      new Table(42, 1, -1, new sbyte[] {20});
    NxS[18] = // Shortest string "^<"
      new Table(60, 1, -1, new sbyte[] {86});
    NxS[19] = new Table(0, 0, -1, null); // Shortest string "<<EOF>>"
    NxS[20] = // Shortest string "/*"
      new Table(10, 33, 20, new sbyte[] {-1, 20, 20, -1, 20, 20, 
          20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 
          20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 21});
    NxS[21] = // Shortest string "/**"
      new Table(42, 6, -1, new sbyte[] {21, -1, -1, -1, -1, 22});
    NxS[22] = new Table(0, 0, -1, null); // Shortest string "/**/"
    NxS[23] = new Table(0, 0, -1, null); // Shortest string "^%%"
    NxS[24] = // Shortest string "/"
      new Table(42, 1, -1, new sbyte[] {20});
    NxS[25] = // Shortest string "<"
      new Table(60, 1, -1, new sbyte[] {86});
    NxS[26] = // Shortest string """
      new Table(0, 93, 99, new sbyte[] {-1, 99, 99, 99, 99, 99, 
          99, -1, -1, -1, -1, -1, -1, -1, 99, 99, 99, 99, 99, 99, 99, 99, 
          99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 50, 99, 99, 99, 
          99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 
          99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 
          99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 
          99, 99, 99, 99, 99, 99, 100});
    NxS[27] = // Shortest string "^%"
      new Table(61, 65, -1, new sbyte[] {28, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 49});
    NxS[28] = new Table(0, 0, -1, null); // Shortest string "&"
    NxS[29] = // Shortest string "'"
      new Table(0, 93, 94, new sbyte[] {-1, 94, 94, 94, 94, 94, 
          94, -1, -1, -1, -1, -1, -1, -1, 94, 94, 94, 94, 94, 94, 94, 94, 
          94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 
          94, -1, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 
          94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 
          94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 
          94, 94, 94, 94, 94, 94, 93});
    NxS[30] = new Table(0, 0, -1, null); // Shortest string "("
    NxS[31] = new Table(0, 0, -1, null); // Shortest string ")"
    NxS[32] = // Shortest string "+"
      new Table(43, 19, -1, new sbyte[] {28, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 28});
    NxS[33] = new Table(0, 0, -1, null); // Shortest string ","
    NxS[34] = // Shortest string "-"
      new Table(45, 17, -1, new sbyte[] {28, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 28});
    NxS[35] = new Table(0, 0, -1, null); // Shortest string "."
    NxS[36] = // Shortest string "/"
      new Table(42, 20, -1, new sbyte[] {20, -1, -1, -1, -1, 47, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 28});
    NxS[37] = // Shortest string "0"
      new Table(48, 10, -1, new sbyte[] {37, 37, 37, 37, 37, 37, 
          37, 37, 37, 37});
    NxS[38] = new Table(0, 0, -1, null); // Shortest string ";"
    NxS[39] = // Shortest string "<"
      new Table(60, 2, -1, new sbyte[] {28, 28});
    NxS[40] = // Shortest string "!"
      new Table(61, 1, -1, new sbyte[] {28});
    NxS[41] = // Shortest string ">"
      new Table(61, 2, -1, new sbyte[] {28, 28});
    NxS[42] = // Shortest string "A"
      new Table(48, 75, -1, new sbyte[] {42, 42, 42, 42, 42, 42, 
          42, 42, 42, 42, -1, -1, -1, -1, -1, -1, -1, 42, 42, 42, 42, 42, 
          42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 
          42, 42, 42, 42, 42, -1, -1, -1, -1, 42, -1, 42, 42, 42, 42, 42, 
          42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 
          42, 42, 42, 42, 42});
    NxS[43] = new Table(0, 0, -1, null); // Shortest string "["
    NxS[44] = new Table(0, 0, -1, null); // Shortest string "]"
    NxS[45] = new Table(0, 0, -1, null); // Shortest string "{"
    NxS[46] = new Table(0, 0, -1, null); // Shortest string "}"
    NxS[47] = // Shortest string "//"
      new Table(10, 4, 47, new sbyte[] {-1, 47, 47, -1});
    NxS[48] = new Table(0, 0, -1, null); // Shortest string "'\001'"
    NxS[49] = new Table(0, 0, -1, null); // Shortest string "^%}"
    NxS[50] = new Table(0, 0, -1, null); // Shortest string """"
    NxS[51] = new Table(0, 0, -1, null); // Shortest string "{"
    NxS[52] = new Table(0, 0, -1, null); // Shortest string "}"
    NxS[53] = new Table(0, 0, -1, null); // Shortest string "\n"
    NxS[54] = // Shortest string "\r"
      new Table(10, 1, -1, new sbyte[] {53});
    NxS[55] = // Shortest string "^\001"
      new Table(10, 4, 55, new sbyte[] {-1, 55, 55, -1});
    NxS[56] = // Shortest string ""
      new Table(10, 33, 57, new sbyte[] {2, 57, 57, 3, 57, 57, 
          57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 
          57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 58});
    NxS[57] = // Shortest string "\001"
      new Table(10, 33, 57, new sbyte[] {-1, 57, 57, -1, 57, 57, 
          57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 
          57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 58});
    NxS[58] = // Shortest string "*"
      new Table(42, 6, -1, new sbyte[] {58, -1, -1, -1, -1, 59});
    NxS[59] = new Table(0, 0, -1, null); // Shortest string "*/"
    NxS[60] = new Table(0, 0, -1, null); // Shortest string "\001"
    NxS[61] = new Table(0, 0, -1, null); // Shortest string "{"
    NxS[62] = new Table(0, 0, -1, null); // Shortest string "|"
    NxS[63] = // Shortest string "\001"
      new Table(10, 4, 63, new sbyte[] {-1, 63, 63, -1});
    NxS[64] = // Shortest string "\001"
      new Table(9, 115, 64, new sbyte[] {-1, -1, 64, 64, -1, 64, 
          64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 
          64, -1, 64, 108, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 
          64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 
          64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 
          64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 109, 110, 64, 64, 
          64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 
          64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 111});
    NxS[65] = // Shortest string """
      new Table(0, 93, 108, new sbyte[] {-1, 108, 108, 108, 108, 108, 
          108, -1, -1, -1, -1, -1, -1, -1, 108, 108, 108, 108, 108, 108, 108, 108, 
          108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 64, 108, 108, 108, 
          108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 
          108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 
          108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 
          108, 108, 108, 108, 108, 108, 116});
    NxS[66] = // Shortest string "["
      new Table(10, 84, 114, new sbyte[] {-1, 114, 114, -1, 114, 114, 
          114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 
          114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 
          114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 
          114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 
          114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 115, -1});
    NxS[67] = // Shortest string "\"
      new Table(10, 4, 64, new sbyte[] {-1, 64, 64, -1});
    NxS[68] = // Shortest string "{"
      new Table(48, 75, -1, new sbyte[] {112, 112, 112, 112, 112, 112, 
          112, 112, 112, 112, -1, -1, -1, -1, -1, -1, -1, 107, 107, 107, 107, 107, 
          107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 
          107, 107, 107, 107, 107, -1, -1, -1, -1, 107, -1, 107, 107, 107, 107, 107, 
          107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 
          107, 107, 107, 107, 107});
    NxS[69] = // Shortest string "\t"
      new Table(9, 24, -1, new sbyte[] {69, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, 69});
    NxS[70] = new Table(0, 0, -1, null); // Shortest string "*"
    NxS[71] = new Table(0, 0, -1, null); // Shortest string ","
    NxS[72] = // Shortest string "0"
      new Table(48, 10, -1, new sbyte[] {72, 72, 72, 72, 72, 72, 
          72, 72, 72, 72});
    NxS[73] = new Table(0, 0, -1, null); // Shortest string ">"
    NxS[74] = // Shortest string "A"
      new Table(48, 75, -1, new sbyte[] {74, 74, 74, 74, 74, 74, 
          74, 74, 74, 74, -1, -1, -1, -1, -1, -1, -1, 74, 74, 74, 74, 74, 
          74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 
          74, 74, 74, 74, 74, -1, -1, -1, -1, 74, -1, 74, 74, 74, 74, 74, 
          74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 
          74, 74, 74, 74, 74});
    NxS[75] = // Shortest string "\001"
      new Table(9, 24, 75, new sbyte[] {-1, -1, 75, 75, -1, 75, 
          75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 
          75, -1});
    NxS[76] = // Shortest string "\t"
      new Table(9, 24, -1, new sbyte[] {76, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, 76});
    NxS[77] = new Table(0, 0, -1, null); // Shortest string "\n"
    NxS[78] = // Shortest string "\r"
      new Table(10, 1, -1, new sbyte[] {77});
    NxS[79] = // Shortest string "\001"
      new Table(10, 4, 79, new sbyte[] {-1, 79, 79, -1});
    NxS[80] = // Shortest string "\t"
      new Table(9, 24, 79, new sbyte[] {80, -1, 79, 79, -1, 79, 
          79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 
          79, 80});
    NxS[81] = // Shortest string ""
      new Table(9, 24, 1, new sbyte[] {-1, 2, 1, 1, 3, 1, 
          1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
          1, -1});
    NxS[82] = // Shortest string "^"
      new Table(9, 114, 1, new sbyte[] {83, 2, 1, 1, 3, 1, 
          1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
          1, 83, 1, 1, 1, 1, 4, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
          5, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
          1, 1, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 
          6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 1, 1, 1, 1, 
          6, 1, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 
          6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6});
    NxS[83] = // Shortest string "^\t"
      new Table(9, 24, 14, new sbyte[] {83, -1, 14, 14, -1, 14, 
          14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 
          14, 83});
    NxS[84] = // Shortest string ""
      new Table(9, 52, 1, new sbyte[] {-1, 2, 1, 1, 3, 1, 
          1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
          1, -1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
          24, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 25});
    NxS[85] = // Shortest string "^"
      new Table(9, 52, 15, new sbyte[] {83, 2, 15, 15, 3, 15, 
          15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 
          15, 83, 15, 15, 15, 15, 16, 15, 15, 15, 15, 15, 15, 15, 15, 15, 
          17, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 18});
    NxS[86] = // Shortest string "<<"
      new Table(69, 1, -1, new sbyte[] {87});
    NxS[87] = // Shortest string "<<E"
      new Table(79, 1, -1, new sbyte[] {88});
    NxS[88] = // Shortest string "<<EO"
      new Table(70, 1, -1, new sbyte[] {89});
    NxS[89] = // Shortest string "<<EOF"
      new Table(62, 1, -1, new sbyte[] {90});
    NxS[90] = // Shortest string "<<EOF>"
      new Table(62, 1, -1, new sbyte[] {19});
    NxS[91] = // Shortest string ""
      new Table(9, 117, 1, new sbyte[] {-1, 2, 1, 1, 3, 1, 
          1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
          1, -1, 40, 26, 1, 1, 40, 28, 29, 30, 31, 40, 32, 33, 34, 35, 
          36, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 28, 38, 39, 40, 41, 
          28, 28, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 
          42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 43, 1, 44, 1, 
          42, 1, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 
          42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 45, 28, 46});
    NxS[92] = // Shortest string "^"
      new Table(9, 117, 1, new sbyte[] {-1, 2, 1, 1, 3, 1, 
          1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
          1, -1, 40, 26, 1, 1, 27, 28, 29, 30, 31, 40, 32, 33, 34, 35, 
          36, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 28, 38, 39, 40, 41, 
          28, 28, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 
          42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 43, 1, 44, 1, 
          42, 1, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 
          42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 45, 28, 46});
    NxS[93] = // Shortest string "'\"
      new Table(10, 111, 94, new sbyte[] {-1, 94, 94, -1, 94, 94, 
          94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 
          94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 
          95, 95, 95, 95, 95, 95, 95, 95, 94, 94, 94, 94, 94, 94, 94, 94, 
          94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 
          94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 
          94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 
          94, 94, 94, 94, 94, 94, 94, 94, 96});
    NxS[94] = // Shortest string "'\001"
      new Table(39, 1, -1, new sbyte[] {48});
    NxS[95] = // Shortest string "'\0"
      new Table(39, 17, -1, new sbyte[] {48, -1, -1, -1, -1, -1, 
          -1, -1, -1, 98, 98, 98, 98, 98, 98, 98, 98});
    NxS[96] = // Shortest string "'\x"
      new Table(39, 64, -1, new sbyte[] {48, -1, -1, -1, -1, -1, 
          -1, -1, -1, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, -1, -1, -1, 
          -1, -1, -1, -1, 97, 97, 97, 97, 97, 97, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, 97, 97, 97, 97, 97, 97});
    NxS[97] = // Shortest string "'\x0"
      new Table(48, 55, -1, new sbyte[] {94, 94, 94, 94, 94, 94, 
          94, 94, 94, 94, -1, -1, -1, -1, -1, -1, -1, 94, 94, 94, 94, 94, 
          94, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 94, 94, 94, 94, 94, 
          94});
    NxS[98] = // Shortest string "'\00"
      new Table(48, 8, -1, new sbyte[] {94, 94, 94, 94, 94, 94, 
          94, 94});
    NxS[99] = // Shortest string ""\001"
      new Table(0, 93, 99, new sbyte[] {-1, 99, 99, 99, 99, 99, 
          99, -1, -1, -1, -1, -1, -1, -1, 99, 99, 99, 99, 99, 99, 99, 99, 
          99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 50, 99, 99, 99, 
          99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 
          99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 
          99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 
          99, 99, 99, 99, 99, 99, 100});
    NxS[100] = // Shortest string ""\"
      new Table(10, 4, 99, new sbyte[] {-1, 99, 99, -1});
    NxS[101] = // Shortest string ""
      new Table(9, 117, 1, new sbyte[] {-1, 2, 1, 1, 3, 1, 
          1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
          1, -1, 40, 26, 1, 1, 40, 28, 29, 30, 31, 40, 32, 33, 34, 35, 
          36, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 28, 38, 39, 40, 41, 
          28, 28, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 
          42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 43, 1, 44, 1, 
          42, 1, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 
          42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 51, 28, 52});
    NxS[102] = // Shortest string ""
      new Table(9, 117, 1, new sbyte[] {-1, 53, 1, 1, 54, 1, 
          1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
          1, -1, 40, 26, 1, 1, 40, 28, 29, 30, 31, 40, 32, 33, 34, 35, 
          36, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 28, 38, 39, 40, 41, 
          28, 28, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 
          42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 43, 1, 44, 1, 
          42, 1, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 
          42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 45, 28, 46});
    NxS[103] = // Shortest string "^"
      new Table(9, 24, 55, new sbyte[] {-1, 2, 55, 55, 3, 55, 
          55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 
          55, -1});
    NxS[104] = // Shortest string ""
      new Table(9, 116, 60, new sbyte[] {-1, 53, 60, 60, 54, 60, 
          60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 
          60, -1, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 
          60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 
          60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 
          60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 
          60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 
          60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 61, 62});
    NxS[105] = // Shortest string ""
      new Table(9, 24, 63, new sbyte[] {-1, 53, 63, 63, 54, 63, 
          63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 
          63, -1});
    NxS[106] = // Shortest string ""
      new Table(9, 115, 64, new sbyte[] {-1, 2, 64, 64, 3, 64, 
          64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 
          64, -1, 64, 65, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 
          64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 
          64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 
          64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 66, 67, 64, 64, 
          64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 
          64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 68});
    NxS[107] = // Shortest string "{A"
      new Table(48, 78, -1, new sbyte[] {107, 107, 107, 107, 107, 107, 
          107, 107, 107, 107, -1, -1, -1, -1, -1, -1, -1, 107, 107, 107, 107, 107, 
          107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 
          107, 107, 107, 107, 107, -1, -1, -1, -1, 107, -1, 107, 107, 107, 107, 107, 
          107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 
          107, 107, 107, 107, 107, -1, -1, 64});
    NxS[108] = // Shortest string ""\001"
      new Table(0, 93, 108, new sbyte[] {-1, 108, 108, 108, 108, 108, 
          108, -1, -1, -1, -1, -1, -1, -1, 108, 108, 108, 108, 108, 108, 108, 108, 
          108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 64, 108, 108, 108, 
          108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 
          108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 
          108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 
          108, 108, 108, 108, 108, 108, 116});
    NxS[109] = // Shortest string "\001["
      new Table(10, 84, 114, new sbyte[] {-1, 114, 114, -1, 114, 114, 
          114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 
          114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 
          114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 
          114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 
          114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 115, -1});
    NxS[110] = // Shortest string "\001\"
      new Table(10, 4, 64, new sbyte[] {-1, 64, 64, -1});
    NxS[111] = // Shortest string "\001{"
      new Table(48, 75, -1, new sbyte[] {112, 112, 112, 112, 112, 112, 
          112, 112, 112, 112, -1, -1, -1, -1, -1, -1, -1, 107, 107, 107, 107, 107, 
          107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 
          107, 107, 107, 107, 107, -1, -1, -1, -1, 107, -1, 107, 107, 107, 107, 107, 
          107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 
          107, 107, 107, 107, 107});
    NxS[112] = // Shortest string "{0"
      new Table(44, 82, -1, new sbyte[] {113, -1, -1, -1, 112, 112, 
          112, 112, 112, 112, 112, 112, 112, 112, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 64});
    NxS[113] = // Shortest string "{0,"
      new Table(48, 78, -1, new sbyte[] {113, 113, 113, 113, 113, 113, 
          113, 113, 113, 113, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, 64});
    NxS[114] = // Shortest string "[\001"
      new Table(10, 84, 114, new sbyte[] {-1, 114, 114, -1, 114, 114, 
          114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 
          114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 
          114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 
          114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 
          114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 115, 64});
    NxS[115] = // Shortest string "[\"
      new Table(10, 4, 114, new sbyte[] {-1, 114, 114, -1});
    NxS[116] = // Shortest string ""\"
      new Table(10, 4, 108, new sbyte[] {-1, 108, 108, -1});
    NxS[117] = // Shortest string ""
      new Table(9, 114, 1, new sbyte[] {69, 53, 1, 1, 54, 1, 
          1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
          1, 69, 1, 1, 1, 1, 1, 1, 1, 1, 1, 70, 1, 71, 1, 1, 
          1, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 1, 1, 1, 1, 73, 
          1, 1, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 
          74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 1, 1, 1, 1, 
          74, 1, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 
          74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74});
    NxS[118] = // Shortest string ""
      new Table(9, 24, 75, new sbyte[] {76, 77, 75, 75, 78, 75, 
          75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 
          75, 76});
    NxS[119] = // Shortest string ""
      new Table(9, 24, 79, new sbyte[] {80, 53, 79, 79, 54, 79, 
          79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 
          79, 80});
    }

int NextState(int qStat) {
    if (chr == ScanBuff.EOF)
        return (qStat <= maxAccept && qStat != currentStart ? currentStart : eofNum);
    else {
        int rslt;
        int idx = (byte)(chr - NxS[qStat].min);
        if ((uint)idx >= (uint)NxS[qStat].rng) rslt = NxS[qStat].dflt;
        else rslt = NxS[qStat].nxt[idx];
        return (rslt == goStart ? currentStart : rslt);
    }
}

int NextState() {
    if (chr == ScanBuff.EOF)
        return (state <= maxAccept && state != currentStart ? currentStart : eofNum);
    else {
        int rslt;
        int idx = (byte)(chr - NxS[state].min);
        if ((uint)idx >= (uint)NxS[state].rng) rslt = NxS[state].dflt;
        else rslt = NxS[state].nxt[idx];
        return (rslt == goStart ? currentStart : rslt);
    }
}
#endregion


#if BACKUP
        // ====================== Nested class ==========================

        internal class Context // class used for automaton backup.
        {
            public int bPos;
            public int cNum;
            public int state;
            public int cChr;
        }
#endif // BACKUP

        // ==============================================================
        // ===== Nested classes for various ScanBuff derived classes ====
        // ==============================================================

        public sealed class StringBuff : ScanBuff
        {
            string str;        // input buffer
            int bPos;          // current position in buffer
            int sLen;

            public StringBuff(string str)
            {
                this.str = str;
                this.sLen = str.Length;
            }

            public override int Read()
            {
                if (bPos < sLen) return str[bPos++];
#if BABEL
                else if (bPos == sLen) { bPos++; return '\n'; }   // one strike, see newline
#endif // BABEL
                else { bPos++; return EOF; }                      // two strikes and you're out!
            }
            
            public override int ReadPos { get { return bPos - 1; } }

            public override int Peek()
            {
                if (bPos < sLen) return str[bPos];
                else return '\n';
            }

            public override string GetString(int beg, int end)
            {
                //  "end" can be greater than sLen with the BABEL
                //  option set.  Read returns a "virtual" EOL if
                //  an attempt is made to read past the end of the
                //  string buffer.  Without the guard any attempt 
                //  to fetch yytext for a token that includes the 
                //  EOL will throw an index exception.
                if (end > sLen) end = sLen;
                if (end <= beg) return ""; 
                else return str.Substring(beg, end - beg);
            }

            public override int Pos
            {
                get { return bPos; }
                set { bPos = value; }
            }
        }

       // ====================== Nested class ==========================
       //  The LineBuff class contributed by Nigel Horspool, 
       //  nigelh@cs.uvic.cs
       // ==============================================================

        public sealed class LineBuff : ScanBuff
        {
            IList<string> line;    // list of source lines from a file
            int numLines;          // number of strings in line list
            string curLine;        // current line in that list
            int cLine;             // index of current line in the list
            int curLen;            // length of current line
            int curLineStart;      // position of line start in whole file
            int curLineEnd;        // position of line end in whole file
            int maxPos;            // max position ever visited in whole file
            int cPos;              // ordinal number of chr in source

            // Constructed from a list of strings, one per source line.
            // The lines have had trailing '\n' characters removed.
            public LineBuff(IList<string> lineList)
            {
                line = lineList;
                numLines = line.Count;
                cPos = curLineStart = 0;
                curLine = numLines>0? line[0] : "";
                maxPos = curLineEnd = curLen = curLine.Length;
                cLine = 1;
            }

            public override int Read()
            {
                if (cPos < curLineEnd)
                    return curLine[cPos++ - curLineStart];
                if (cPos++ == curLineEnd)
                    return '\n';
                if (cLine >= numLines)
                    return EOF;
                curLine = line[cLine];
                curLen = curLine.Length;
                curLineStart = curLineEnd + 1;
                curLineEnd = curLineStart + curLen;
                if (curLineEnd>maxPos)
                    maxPos = curLineEnd;
                cLine++;
                return curLen>0? curLine[0] : '\n';
            }

            public override int Peek()
            {
                return (cPos < curLineEnd)? curLine[cPos - curLineStart] : '\n';
            }

            // To speed up searches for the line containing a position
            private int cachedPos = 0;
            private int cachedIx = 0;
            private int cachedLstart = 0;

            // Given a position pos within the entire source, the results are
            //   ix     -- the index of the containing line
            //   lstart -- the position of the first character on that line
            private void findIndex( int pos, out int ix, out int lstart )
            {
                if (pos >= cachedPos) {
                    ix = cachedIx;  lstart = cachedLstart;
                } else {
                    ix = lstart = 0;
                }
                for( ; ; ) {
                    int len = line[ix].Length + 1;
                    if (pos < lstart+len) break;
                    lstart += len;
                    ix++;
                }
                cachedPos = pos;
                cachedIx = ix;
                cachedLstart = lstart;
            }
        
            public override string GetString(int beg, int end)
            {
                if (beg >= maxPos || end <= beg) return "";
                int endIx, begIx, endLineStart, begLineStart;
                findIndex(beg, out begIx, out begLineStart);
                int begCol = beg - begLineStart;
                findIndex(end, out endIx, out endLineStart);
                int endCol = end - endLineStart;
                string s = line[begIx];
                if (begIx == endIx) {
                    // the usual case, substring all on one line
                    return (endCol <= s.Length)?
                        s.Substring(begCol, endCol-begCol)
                        : s.Substring(begCol) + "\n";
                }
                // the string spans multiple lines, yuk!
                StringBuilder sb = new StringBuilder();
                if (begCol < s.Length)
                    sb.Append(s.Substring(begCol));
                for( ; ; ) {
                    sb.Append("\n");
                    s = line[++begIx];
                    if (begIx >= endIx) break;
                    sb.Append(s);
                }
                if (endCol <= s.Length) {
                    sb.Append(s.Substring(0, endCol));
                } else {
                    sb.Append(s);
                    sb.Append("\n");
                }
                return sb.ToString();
            }

            public override int Pos
            {
                get { return cPos; }
                set {
                    cPos = value;
                    findIndex(cPos, out cLine, out curLineStart);
                    curLine = line[cLine];
                    curLineEnd = curLineStart+curLine.Length;
                }
            }
            
            public override int ReadPos { get { return cPos - 1; } }
        }
        
        // ====================== Nested class ==========================

        public sealed class StreamBuff : ScanBuff
        {
            BufferedStream bStrm;   // input buffer
            int delta = 1;          // number of bytes in chr, could be 0 for EOF.

            public StreamBuff(Stream str) { this.bStrm = new BufferedStream(str); }

            public override int Read() {
                int ch0 = bStrm.ReadByte();
                delta = (ch0 == EOF ? 0 : 1);
                return ch0; 
            }
            
            public override int ReadPos {
                get { return (int)bStrm.Position - delta; }
            }

            public override int Peek()
            {
                int rslt = bStrm.ReadByte();
                bStrm.Seek(-delta, SeekOrigin.Current);
                return rslt;
            }

            public override string GetString(int beg, int end)
            {
                if (end - beg <= 0) return "";
                long savePos = bStrm.Position;
                char[] arr = new char[end - beg];
                bStrm.Position = (long)beg;
                for (int i = 0; i < (end - beg); i++)
                    arr[i] = (char)bStrm.ReadByte();
                bStrm.Position = savePos;
                return new String(arr);
            }

            // Pos is the position *after* reading chr!
            public override int Pos
            {
                get { return (int)bStrm.Position; }
                set { bStrm.Position = value; }
            }
        }

        // ====================== Nested class ==========================

        /// <summary>
        /// This is the Buffer for UTF8 files.
        /// It attempts to read the encoding preamble, which for 
        /// this encoding should be unicode point \uFEFF which is 
        /// encoded as EF BB BF
        /// </summary>
        public class TextBuff : ScanBuff
        {
            protected BufferedStream bStrm;   // input buffer
            protected int delta = 1;          // length of chr, zero for EOF!
            
            private Exception BadUTF8()
            { return new Exception(String.Format("BadUTF8 Character")); }

            /// <summary>
            /// TextBuff factory.  Reads the file preamble
            /// and returns a TextBuff, LittleEndTextBuff or
            /// BigEndTextBuff according to the result.
            /// </summary>
            /// <param name="strm">The underlying stream</param>
            /// <returns></returns>
            public static TextBuff NewTextBuff(Stream strm)
            {
                // First check if this is a UTF16 file
                //
                int b0 = strm.ReadByte();
                int b1 = strm.ReadByte();

                if (b0 == 0xfe && b1 == 0xff)
                    return new BigEndTextBuff(strm);
                if (b0 == 0xff && b1 == 0xfe)
                    return new LittleEndTextBuff(strm);
                
                int b2 = strm.ReadByte();
                if (b0 == 0xef && b1 == 0xbb && b2 == 0xbf)
                    return new TextBuff(strm);
                //
                // There is no unicode preamble, so we
                // must go back to the UTF8 default.
                //
                strm.Seek(0, SeekOrigin.Begin);
                return new TextBuff(strm);
            }

            protected TextBuff(Stream str) { 
                this.bStrm = new BufferedStream(str);
            }

            public override int Read()
            {
                int ch0 = bStrm.ReadByte();
                int ch1;
                int ch2;
                if (ch0 < 0x7f)
                {
                    delta = (ch0 == EOF ? 0 : 1);
                    return ch0;
                }
                else if ((ch0 & 0xe0) == 0xc0)
                {
                    delta = 2;
                    ch1 = bStrm.ReadByte();
                    if ((ch1 & 0xc0) == 0x80)
                        return ((ch0 & 0x1f) << 6) + (ch1 & 0x3f);
                    else
                        throw BadUTF8();
                }
                else if ((ch0 & 0xf0) == 0xe0)
                {
                    delta = 3;
                    ch1 = bStrm.ReadByte();
                    ch2 = bStrm.ReadByte();
                    if ((ch1 & ch2 & 0xc0) == 0x80)
                        return ((ch0 & 0xf) << 12) + ((ch1 & 0x3f) << 6) + (ch2 & 0x3f);
                    else
                        throw BadUTF8();
                }
                else
                    throw BadUTF8();
            }

            public sealed override int ReadPos
            {
                get { return (int)bStrm.Position - delta; }
            }

            public sealed override int Peek()
            {
                int rslt = Read();
                bStrm.Seek(-delta, SeekOrigin.Current);
                return rslt;
            }

            /// <summary>
            /// Returns the string from the buffer between
            /// the given file positions.  This needs to be
            /// done carefully, as the number of characters
            /// is, in general, not equal to (end - beg).
            /// </summary>
            /// <param name="beg">Begin filepos</param>
            /// <param name="end">End filepos</param>
            /// <returns></returns>
            public sealed override string GetString(int beg, int end)
            {
                int i;
                if (end - beg <= 0) return "";
                long savePos = bStrm.Position;
                char[] arr = new char[end - beg];
                bStrm.Position = (long)beg;
                for (i = 0; bStrm.Position < end; i++)
                    arr[i] = (char)Read();
                bStrm.Position = savePos;
                return new String(arr, 0, i);
            }

            // Pos is the position *after* reading chr!
            public sealed override int Pos
            {
                get { return (int)bStrm.Position; }
                set { bStrm.Position = value; }
            }
        }

        // ====================== Nested class ==========================
        /// <summary>
        /// This is the Buffer for Big-endian UTF16 files.
        /// </summary>
        public sealed class BigEndTextBuff : TextBuff
        {
            internal BigEndTextBuff(Stream str) : base(str) { } // 

            public override int Read()
            {
                int ch0 = bStrm.ReadByte();
                int ch1 = bStrm.ReadByte();
                if (ch1 == EOF)
                {
                    // An EOF in either byte counts as an EOF
                    delta = (ch0 == EOF ? 0 : 1);
                    return -1;
                }
                else
                {
                    delta = 2;
                    return (ch0 << 8) + ch1;
                }
            }
        }
        
        // ====================== Nested class ==========================
        /// <summary>
        /// This is the Buffer for Little-endian UTF16 files.
        /// </summary>
        public sealed class LittleEndTextBuff : TextBuff
        {
            internal LittleEndTextBuff(Stream str) : base(str) { } // { this.bStrm = new BufferedStream(str); }

            public override int Read()
            {
                int ch0 = bStrm.ReadByte();
                int ch1 = bStrm.ReadByte();
                if (ch1 == EOF)
                {
                    // An EOF in either byte counts as an EOF
                    delta = (ch0 == EOF ? 0 : 1);
                    return -1;
                }
                else
                {
                    delta = 2;
                    return (ch1 << 8) + ch1;
                }
            }
        }
        // =================== End Nested classes =======================

        public Scanner(Stream file) {
            buffer = new StreamBuff(file);
            this.cNum = -1;
            this.chr = '\n'; // to initialize yyline, yycol and lineStart
            GetChr();
        }

        public Scanner() { }

        void GetChr()
        {
            if (chr == '\n') 
            { 
                lineStartNum = cNum + 1; 
                lNum++; 
            }
            chr = buffer.Read();
            cNum++;
        }

        void MarkToken()
        {
            tokPos = buffer.ReadPos;
            tokNum = cNum;
            tokLin = lNum;
            tokCol = cNum - lineStartNum;
        }
        
        void MarkEnd()
        {
            tokTxt = null;
            tokLen = cNum - tokNum;
            tokEPos = buffer.ReadPos;
            tokELin = lNum;
            tokECol = cNum - lineStartNum;
        }

        // ==============================================================
        // =====    Initialization of string-based input buffers     ====
        // ==============================================================

        public void SetSource(string source, int offset)
        {
            this.buffer = new StringBuff(source);
            this.buffer.Pos = offset;
            this.cNum = offset - 1;
            this.chr = '\n'; // to initialize yyline, yycol and lineStart
            GetChr();
        }
        
        // ================ LineBuffer Initialization ===================

        public void SetSource(IList<string> source)
        {
            this.buffer = new LineBuff(source);
            this.chr = '\n'; // to initialize yyline, yycol and lineStart
            this.cNum = -1;
            GetChr();
        }
        
        // ==============================================================

#if BABEL
        //
        //  Get the next token for Visual Studio
        //
        //  "state" is the inout mode variable that maintains scanner
        //  state between calls, using the EolState property. In principle,
        //  if the calls of EolState are costly set could be called once
        //  only per line, at the start; and get called only at the end
        //  of the line. This needs more infrastructure ...
        //
        public int GetNext(ref int state, out int start, out int end)
        {
            Tokens next;
            int s, e;
            s = state;        // state at start
            EolState = state;
            next = (Tokens)Scan();
            state = EolState;
            e = state;       // state at end;
            start = tokPos;
            end = tokEPos - 1; // end is the index of last char.
            return (int)next;
        }        
#endif // BABEL

        // ======== IScanner<> Implementation =========

        public override int yylex()
        {
            // parserMax is set by reflecting on the Tokens
            // enumeration.  If maxParseTokeen is defined
            // that is used, otherwise int.MaxValue is used.
            int next;
            do { next = Scan(); } while (next >= parserMax);
            return next;
        }
        
        int yyleng { get { return tokLen; } }
        int yypos { get { return tokPos; } }
        int yyline { get { return tokLin; } }
        int yycol { get { return tokCol; } }

        public string yytext
        {
            get 
            {
                if (tokTxt == null) 
                    tokTxt = buffer.GetString(tokPos, tokEPos);
                return tokTxt;
            }
        }

        void yyless(int n) { 
            buffer.Pos = tokPos;
            // Must read at least one char, so set before start.
            cNum = tokNum - 1;
            for (int i = 0; i <= n; i++) GetChr();
            MarkEnd();
        }

        // ============ methods available in actions ==============

        internal int YY_START {
            get { return currentScOrd; }
            set { currentScOrd = value; } 
        }
        
        internal void BEGIN(int next) {
            currentScOrd = next;
            currentStart = startState[next];
        }

        // ============== The main tokenizer code =================

        int Scan()
        {
            try {
                for (; ; )
                {
                    int next;              // next state to enter                   
#if BACKUP
                    bool inAccept = false; // inAccept ==> current state is an accept state
                    Result rslt = Result.noMatch;
                    // skip "idle" transitions
#if LEFTANCHORS
                    if (lineStartNum == cNum && NextState(anchorState[currentScOrd]) != currentStart)
                        state = anchorState[currentScOrd];
                    else {
                        state = currentStart;
                        while (NextState() == state) {
                            GetChr();
                            if (lineStartNum == cNum) {
                                int anchor = anchorState[currentScOrd];
                                if (NextState(anchor) != state) {
                                    state = anchor; 
                                    break;
                                }
                            }
                        }
                    }
#else // !LEFTANCHORS
                    state = currentStart;
                    while (NextState() == state) 
                        GetChr(); // skip "idle" transitions
#endif // LEFTANCHORS
                    MarkToken();
                    
                    while ((next = NextState()) != currentStart)
                        if (inAccept && next > maxAccept) // need to prepare backup data
                        {
                            Context ctx = new Context();
                            rslt = Recurse2(ctx, next);
                            if (rslt == Result.noMatch) RestoreStateAndPos(ctx);
                            break;
                        }
                        else
                        {
                            state = next;
                            GetChr();
                            if (state <= maxAccept) inAccept = true;
                        }
#else // !BACKUP
#if LEFTANCHORS
                    if (lineStartNum == cNum) {
                        int anchor = anchorState[currentScOrd];
                        if (NextState(anchor) != currentStart)
                            state = anchor;
                    }
                    else {
                        state = currentStart;
                        while (NextState() == state) {
                            GetChr();
                            if (lineStartNum == cNum) {
                                int anchor = anchorState[currentScOrd];
                                if (NextState(anchor) != state) {
                                    state = anchor;
                                    break;
                                }
                            }
                        }
                    }
#else // !LEFTANCHORS
                    state = currentStart;
                    while (NextState() == state) 
                        GetChr(); // skip "idle" transitions
#endif // LEFTANCHORS
                    MarkToken();
                    // common code
                    while ((next = NextState()) != currentStart)
                    {
                        state = next;
                        GetChr();
                    }
#endif // BACKUP
                    if (state > maxAccept) 
                        state = currentStart;
                    else
                    {
                        MarkEnd();
#region ActionSwitch
#pragma warning disable 162
    switch (state)
    {
        case eofNum:
            return (int)Tokens.EOF;
        case 1:
        case 4:
        case 5:
        case 24:
        case 25:
        case 26:
        case 29:
        case 65:
        case 66:
        case 67:
        case 68:
Error(79, TokenSpan()); return (int)Tokens.repErr;
            break;
        case 2:
        case 3:
return (int)Tokens.EOL;
            break;
        case 6:
yy_push_state(XPEOL); 
                              yy_push_state(REGEX); 
                              yy_push_state(SPACE); 
                              return (int)Tokens.name;
            break;
        case 7:
        case 8:
yy_push_state(CMMNT); return (int)Tokens.defCommentS;
            break;
        case 9:
return (int)Tokens.defCommentE;
            break;
        case 10:
yy_clear_stack(); BEGIN(RULES); yy_push_state(XPEOL); return (int)Tokens.PCPC;
            break;
        case 11:
return (int)GetTagToken(yytext);
            break;
        case 12:
yy_push_state(UCODE); yy_push_state(XPEOL); return (int)Tokens.lPcBrace;
            break;
        case 13:
return (int)Tokens.rPcBrace; /* error! */
            break;
        case 14:
yyless(yyleng - 1); 
yy_push_state(INDNT); return (int)Tokens.lxIndent;
            break;
        case 15:
        case 16:
        case 17:
yy_push_state(SMACT); 
                                                yy_push_state(SPACE); 
                                                yy_push_state(REGEX); 
                                                yyless(0);
            break;
        case 18:
yy_push_state(SMACT);
                                                yy_push_state(SPACE); 
                                                yy_push_state(REGEX); 
                                                yy_push_state(NMLST); 
                                                return (int)Tokens.lCond;
            break;
        case 19:
yy_push_state(SMACT); yy_push_state(SPACE); return (int)Tokens.pattern;
            break;
        case 20:
        case 21:
yy_push_state(CMMNT); return (int)Tokens.csCommentS;
            break;
        case 22:
return (int)Tokens.csCommentE;
            break;
        case 23:
yy_clear_stack(); BEGIN(UCODE); yy_push_state(XPEOL); return (int)Tokens.PCPC;
            break;
        case 27:
        case 28:
        case 32:
        case 34:
        case 36:
        case 39:
        case 40:
        case 41:
return (int)Tokens.csOp;
            break;
        case 30:
return (int)Tokens.csLPar;
            break;
        case 31:
return (int)Tokens.csRPar;
            break;
        case 33:
return (int)Tokens.comma;
            break;
        case 35:
return (int)Tokens.csDot;
            break;
        case 37:
return (int)Tokens.csNumber;
            break;
        case 38:
return (int)Tokens.semi;
            break;
        case 42:
return (int)GetIdToken(yytext);
            break;
        case 43:
return (int)Tokens.csLBrac;
            break;
        case 44:
return (int)Tokens.csRBrac;
            break;
        case 45:
return (int)Tokens.csLBrace;
            break;
        case 46:
return (int)Tokens.csRBrace;
            break;
        case 47:
return (int)Tokens.csCommentL;
            break;
        case 48:
return (int)Tokens.csLitchr;
            break;
        case 49:
yy_pop_state(); yy_push_state(XPEOL); return (int)Tokens.rPcBrace;
            break;
        case 50:
return (int)Tokens.csLitstr;
            break;
        case 51:
depth++; return (int)Tokens.csLBrace;
            break;
        case 52:
if (depth > 0) { depth--; return (int)Tokens.csRBrace; }
                                          else           { yy_pop_state(); return (int)Tokens.lxRBrace; }
            break;
        case 53:
        case 54:
yy_pop_state(); return (int)Tokens.EOL;
            break;
        case 55:
yy_pop_state(); yyless(0); return (int)Tokens.lxEndIndent;
            break;
        case 56:
        case 57:
        case 58:
return (int)Tokens.csCommentS;
            break;
        case 59:
yy_pop_state(); return (int)Tokens.csCommentE;
            break;
        case 60:
yy_pop_state(); yy_push_state(LCODE); yyless(0);
            break;
        case 61:
yy_pop_state(); yy_push_state(BCODE); depth = 0; return (int)Tokens.lxLBrace;
            break;
        case 62:
yy_pop_state(); return (int)Tokens.lxBar;
            break;
        case 63:
Error(80, TokenSpan()); return (int)Tokens.repErr;
            break;
        case 64:
yy_pop_state(); return (int)Tokens.pattern;
            break;
        case 69:
/* skip */
            break;
        case 70:
return (int)Tokens.csStar;
            break;
        case 71:
return (int)Tokens.comma;
            break;
        case 72:
return (int)Tokens.csNumber;
            break;
        case 73:
yy_pop_state(); return (int)Tokens.rCond;
            break;
        case 74:
return (int)Tokens.name;
            break;
        case 75:
Error(78, TokenSpan()); return (int)Tokens.repErr;
            break;
        case 76:
yy_pop_state();
            break;
        case 77:
        case 78:
yy_pop_state(); Error(78, TokenSpan()); return (int)Tokens.EOL;
            break;
        case 79:
yy_pop_state(); return (int)Tokens.verbatim;
            break;
        case 80:
/* skip */
            break;
        default:
            break;
    }
#pragma warning restore 162
#endregion
                    }
                }
            } // end try
            finally {
// Epilog from LEX file
		    yylloc = new LexSpan(tokLin, tokCol, tokELin, tokECol, tokPos, tokEPos, buffer);
            } // end finally
        }

#if BACKUP
        Result Recurse2(Context ctx, int next)
        {
            // Assert: at entry "state" is an accept state AND
            //         NextState(state, chr) != currentStart AND
            //         NextState(state, chr) is not an accept state.
            //
            bool inAccept;
            SaveStateAndPos(ctx);
            state = next;
            if (state == eofNum) return Result.accept;
            GetChr();
            inAccept = false;

            while ((next = NextState()) != currentStart)
            {
                if (inAccept && next > maxAccept) // need to prepare backup data
                    SaveStateAndPos(ctx);
                state = next;
                if (state == eofNum) return Result.accept;
                GetChr(); 
                inAccept = (state <= maxAccept);
            }
            if (inAccept) return Result.accept; else return Result.noMatch;
        }

        void SaveStateAndPos(Context ctx)
        {
            ctx.bPos  = buffer.Pos;
            ctx.cNum  = cNum;
            ctx.state = state;
            ctx.cChr  = chr;
        }

        void RestoreStateAndPos(Context ctx)
        {
            buffer.Pos = ctx.bPos;
            cNum  = ctx.cNum;
            state = ctx.state;
            chr   = ctx.cChr;
        }

        void RestorePos(Context ctx) { buffer.Pos = ctx.bPos; cNum = ctx.cNum; }
#endif // BACKUP

        // ============= End of the tokenizer code ================

#if STACK        
        internal void yy_clear_stack() { scStack.Clear(); }
        internal int yy_top_state() { return scStack.Peek(); }
        
        internal void yy_push_state(int state)
        {
            scStack.Push(currentScOrd);
            BEGIN(state);
        }
        
        internal void yy_pop_state()
        {
            // Protect against input errors that pop too far ...
            if (scStack.Count > 0) {
				int newSc = scStack.Pop();
				BEGIN(newSc);
            } // Otherwise leave stack unchanged.
        }
 #endif // STACK

        internal void ECHO() { Console.Out.Write(yytext); }
        
#region UserCodeSection

/*  User code is in ParseHelper.cs  */

#endregion
    } // end class Scanner
} // end namespace
