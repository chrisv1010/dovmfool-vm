// This code was generated by the Gardens Point Parser Generator
// Copyright (c) Wayne Kelly, QUT 2005-2006
// (see accompanying GPPGcopyright.rtf)


using System;
using System.Collections.Generic;
using System.Text;
using gppg;

public enum Tokens {error=125,EOF=126,DIGIT=127,LETTER=128,
    UMINUS=129};

public class Parser: ShiftReduceParser<int, LexLocation>
{

    int[] regs = new int[26];
    int _base;
  protected override void Initialize()
  {
    this.errToken = (int)Tokens.error;
    this.eofToken = (int)Tokens.EOF;

    states=new State[37];
    AddState(0,new State(-2,new int[]{-1,1}));
    AddState(1,new State(new int[]{126,2,125,5,10,7,40,25,45,28,128,34,127,33},new int[]{-3,3,-4,10,-5,31}));
    AddState(2,new State(-1));
    AddState(3,new State(new int[]{10,4}));
    AddState(4,new State(-3));
    AddState(5,new State(new int[]{10,6}));
    AddState(6,new State(-4));
    AddState(7,new State(new int[]{40,25,45,28,128,34,127,33},new int[]{-3,8,-4,10,-5,31}));
    AddState(8,new State(new int[]{10,9}));
    AddState(9,new State(-5));
    AddState(10,new State(new int[]{42,11,47,13,37,15,43,17,45,19,38,21,124,23,10,-6}));
    AddState(11,new State(new int[]{40,25,45,28,128,30,127,33},new int[]{-4,12,-5,31}));
    AddState(12,new State(-9));
    AddState(13,new State(new int[]{40,25,45,28,128,30,127,33},new int[]{-4,14,-5,31}));
    AddState(14,new State(-10));
    AddState(15,new State(new int[]{40,25,45,28,128,30,127,33},new int[]{-4,16,-5,31}));
    AddState(16,new State(-11));
    AddState(17,new State(new int[]{40,25,45,28,128,30,127,33},new int[]{-4,18,-5,31}));
    AddState(18,new State(new int[]{42,11,47,13,37,15,43,-12,45,-12,38,-12,124,-12,10,-12,41,-12}));
    AddState(19,new State(new int[]{40,25,45,28,128,30,127,33},new int[]{-4,20,-5,31}));
    AddState(20,new State(new int[]{42,11,47,13,37,15,43,-13,45,-13,38,-13,124,-13,10,-13,41,-13}));
    AddState(21,new State(new int[]{40,25,45,28,128,30,127,33},new int[]{-4,22,-5,31}));
    AddState(22,new State(new int[]{42,11,47,13,37,15,43,17,45,19,38,-14,124,-14,10,-14,41,-14}));
    AddState(23,new State(new int[]{40,25,45,28,128,30,127,33},new int[]{-4,24,-5,31}));
    AddState(24,new State(new int[]{42,11,47,13,37,15,43,17,45,19,38,21,124,-15,10,-15,41,-15}));
    AddState(25,new State(new int[]{40,25,45,28,128,30,127,33},new int[]{-4,26,-5,31}));
    AddState(26,new State(new int[]{41,27,42,11,47,13,37,15,43,17,45,19,38,21,124,23}));
    AddState(27,new State(-8));
    AddState(28,new State(new int[]{40,25,45,28,128,30,127,33},new int[]{-4,29,-5,31}));
    AddState(29,new State(-16));
    AddState(30,new State(-17));
    AddState(31,new State(new int[]{127,32,42,-18,47,-18,37,-18,43,-18,45,-18,38,-18,124,-18,10,-18,41,-18}));
    AddState(32,new State(-20));
    AddState(33,new State(-19));
    AddState(34,new State(new int[]{61,35,42,-17,47,-17,37,-17,43,-17,45,-17,38,-17,124,-17,10,-17}));
    AddState(35,new State(new int[]{40,25,45,28,128,30,127,33},new int[]{-4,36,-5,31}));
    AddState(36,new State(new int[]{42,11,47,13,37,15,43,17,45,19,38,21,124,23,10,-7}));

    rules=new Rule[21];
    rules[1]=new Rule(-2, new int[]{-1,126});
    rules[2]=new Rule(-1, new int[]{});
    rules[3]=new Rule(-1, new int[]{-1,-3,10});
    rules[4]=new Rule(-1, new int[]{-1,125,10});
    rules[5]=new Rule(-1, new int[]{-1,10,-3,10});
    rules[6]=new Rule(-3, new int[]{-4});
    rules[7]=new Rule(-3, new int[]{128,61,-4});
    rules[8]=new Rule(-4, new int[]{40,-4,41});
    rules[9]=new Rule(-4, new int[]{-4,42,-4});
    rules[10]=new Rule(-4, new int[]{-4,47,-4});
    rules[11]=new Rule(-4, new int[]{-4,37,-4});
    rules[12]=new Rule(-4, new int[]{-4,43,-4});
    rules[13]=new Rule(-4, new int[]{-4,45,-4});
    rules[14]=new Rule(-4, new int[]{-4,38,-4});
    rules[15]=new Rule(-4, new int[]{-4,124,-4});
    rules[16]=new Rule(-4, new int[]{45,-4});
    rules[17]=new Rule(-4, new int[]{128});
    rules[18]=new Rule(-4, new int[]{-5});
    rules[19]=new Rule(-5, new int[]{127});
    rules[20]=new Rule(-5, new int[]{-5,127});

    nonTerminals = new string[] {"", "list", "$accept", "stat", "expr", 
      "number", };
  }

  protected override void DoAction(int action)
  {
    switch (action)
    {
      case 4: // list -> list error '\n' 
{
                    yyerrok();
                }
        break;
      case 5: // list -> list '\n' stat '\n' 
{ /* skip */ }
        break;
      case 6: // stat -> expr 
{
                    System.Console.WriteLine(value_stack.array[value_stack.top-1]);
                }
        break;
      case 7: // stat -> LETTER '=' expr 
{
                    regs[value_stack.array[value_stack.top-3]] = value_stack.array[value_stack.top-1];
                }
        break;
      case 8: // expr -> '(' expr ')' 
{
                    yyval = value_stack.array[value_stack.top-2];
                }
        break;
      case 9: // expr -> expr '*' expr 
{
                    yyval = value_stack.array[value_stack.top-3] * value_stack.array[value_stack.top-1];
                }
        break;
      case 10: // expr -> expr '/' expr 
{
                    yyval = value_stack.array[value_stack.top-3] / value_stack.array[value_stack.top-1];
                }
        break;
      case 11: // expr -> expr '%' expr 
{
                    yyval = value_stack.array[value_stack.top-3] % value_stack.array[value_stack.top-1];
                }
        break;
      case 12: // expr -> expr '+' expr 
{
                    yyval = value_stack.array[value_stack.top-3] + value_stack.array[value_stack.top-1];
                }
        break;
      case 13: // expr -> expr '-' expr 
{
                    yyval = value_stack.array[value_stack.top-3] - value_stack.array[value_stack.top-1];
                }
        break;
      case 14: // expr -> expr '&' expr 
{
                    yyval = value_stack.array[value_stack.top-3] & value_stack.array[value_stack.top-1];
                }
        break;
      case 15: // expr -> expr '|' expr 
{
                    yyval = value_stack.array[value_stack.top-3] | value_stack.array[value_stack.top-1];
                }
        break;
      case 16: // expr -> '-' expr 
{
                    yyval = -value_stack.array[value_stack.top-1];
                }
        break;
      case 17: // expr -> LETTER 
{
                    yyval = regs[value_stack.array[value_stack.top-1]];
                }
        break;
      case 19: // number -> DIGIT 
{
                    yyval = value_stack.array[value_stack.top-1];
                    _base = (value_stack.array[value_stack.top-1]==0) ? 8 : 10;
                }
        break;
      case 20: // number -> number DIGIT 
{
                    yyval = _base * value_stack.array[value_stack.top-2] + value_stack.array[value_stack.top-1];
                }
        break;
    }
  }

  protected override string TerminalToString(int terminal)
  {
    if (((Tokens)terminal).ToString() != terminal.ToString())
      return ((Tokens)terminal).ToString();
    else
      return CharToString((char)terminal);
  }



static void Main(string[] args)
{
    Parser parser = new Parser();
    
    System.IO.TextReader reader;
    if (args.Length > 0)
        reader = new System.IO.StreamReader(args[0]);
    else
        reader = System.Console.In;
        
    parser.scanner = new Scanner(reader);
    //parser.Trace = true;
    
    parser.Parse();
}

class Scanner: gppg.IScanner<int,LexLocation>
{
    private System.IO.TextReader reader;

    public Scanner(System.IO.TextReader reader)
    {
        this.reader = reader;
    }

    public override int yylex()
    {
        char ch = (char) reader.Read();

        if (ch == '\n')
            return ch;
        else if (char.IsWhiteSpace(ch))
            return yylex();
        else if (char.IsDigit(ch))
        {
            yylval = ch - '0';
            return (int)Tokens.DIGIT;
        }
        else if (char.IsLetter(ch))
        {
            yylval = char.ToLower(ch) - 'a';
            return (int)Tokens.LETTER;
        }
        else
            switch (ch)
            {
                case '+':
                case '-':
                case '*':
                case '/':
                case '(':
                case ')':
                case '%':
                case '|':
                case '&':
                case '=':
                    return ch;
                default:
                    Console.Error.WriteLine("Illegal character '{0}'", ch);
                    return yylex();
            }
    }

    public override void yyerror(string format, params object[] args)
    {
        Console.Error.WriteLine(format, args);
    }
}
}
