.class public Object {
	.handler public get-type .external Object.get-type()
	.handler public to-string .external Object.to-string()
	.handler public equals .external Object.equals(other)
	
	.handler public is-true() {
		push-literal 1
		return
	}

	.handler public is-false() {
		push-literal 0			
		return
	}
}
.class public ObjectSet extends Object { }

.class private System {
	.fields { console }
	
	.handler public initialize() {
		push-literal "System.Console"
		new-instance
		store-field console
		return-void
	}
	
	.handler public get-console() {
		load-field console
		return
	}
	
	.handler public new-array .external System.Array.New(size)
		
	.class private Array {
		.handler public get .external System.Array.get(index)
		.handler public set .external System.Array.set(index)
		.handler public length .external System.Array.length()
	}
	
	.class public Exception {
		.fields { message }
		
		.handler public initialize(message) {
			load-argument message
			store-field message
		}
		
		.handler public to-string() {
			load-field message
			return
		}
		
		.handler public message() {
			load-field message
			return
		}
	}
	
	.class public InvalidOperationException extends System.Exception {
		.fields { operation }
	
		.handler public initialize(operation) {
			load-this
			push-literal "The specified operation could not be executed."
			push-literal "System.Exception.initialize:1"
			send-message
			
			load-argument operation
			store-field operation
		}		
		
		.handler public operation() {
			load-field operation
			return
		}
	}
	
	.class public InvalidVMProgramException extends System.Exception {
		.handler public initialize() {
			load-this
			push-literal "The executing program is invalid."
			push-literal "initialize:1"
			send-message
		}
	}

	.class public OutOfMemoryException extends System.Exception {
		.handler public initialize() {
			load-this
			push-literal "Heap space has been exhausted."
			push-literal "initialize:1"
			send-message
		}
	}

	.class public ClassLoaderException extends System.Exception {
		.handler public initialize() {
			load-this
			push-literal "An exception occured while loading a class."
			push-literal "initialize:1"
			send-message
		}
	}

	.class public InvalidThreadIdException extends System.Exception {
		.handler public initialize() {
			load-this
			push-literal "Specified thread id is invalid."
			push-literal "initialize:1"
			send-message
		}
	}

	.class public NotImplementedException extends System.Exception {
		.handler public initialize() {
			load-this
			push-literal "The message handler has not been implemented."
			push-literal "initialize:1"
			send-message
		}
	}
	
	.class public InterpretorException extends System.Exception {
		.handler public initialize() {
			load-this
			push-literal "An unknown error occured in the interpretor."
			push-literal "initialize:1"
			send-message
		}
	}
	
	.class public InterpretorFailedToStopException extends System.Exception {
		.handler public initialize() {
			load-this
			push-literal "Interpretor failed to stop."
			push-literal "initialize:1"
			send-message
		}
	}

	.class public ApplicationException extends System.Exception {
		.handler public initialize() {
			load-this
			push-literal "Unknown application exception occured."
			push-literal "initialize:1"
			send-message
		}
	}

	.class public ArgumentException extends System.ApplicationException {
		.fields { argument }
		
		.handler public initialize(message, argument) {
			load-this
			load-argument message
			push-literal "System.Exception.initialize:1"
			send-message
			
			load-argument argument
			store-field argument
		}
		
		.handler public argument() {
			load-field argument
			return
		}
	}
	
	.class public ArgumentOutOfRangeException extends System.ArgumentException {
		.handler public initialize(argument) {
			load-this
			push-literal "The specified argument was out of range for the specified operation."
			load-argument argument
			push-literal "System.Exception.initialize:2"
			send-message
		}
	}
	
	.class public ArgumentNullException extends System.ArgumentException {
		.handler public initialize(argument) {
			load-this
			push-literal "The specified argument was null."
			load-argument argument
			push-literal "System.Exception.initialize:2"
			send-message
		}
	}
	
	.class public InvalidCastException extends System.ApplicationException {
		.handler public initialize() {
			load-this
			push-literal "Object can not be cast to specified type."
			push-literal "initialize:1"
			send-message
		}
	}

	.class public MessageNotUnderstoodException extends System.ApplicationException {
		.fields { invalidMessage, object }
	
		.handler public initialize(message, invalidMessage, object) {
			load-this
			load-argument message
			push-literal "initialize:1"
			send-message
			
			load-argument invalidMessage
			store-field invalidMessage
			
			load-argument object
			store-field object
		}
		
		.handler public invalid-message() {
			load-field invalidMessage
			return
		}
		
		.handler public object() {
			load-field object
			return
		}
	}

	.class public ClassNotFoundException extends System.ApplicationException {
		.fields { className }
		.handler public initialize(message, className) {
			load-this
			push-literal "Object can not be cast to specified type."
			push-literal "initialize:1"
			send-message
		}
	}

	.class public UnknownExternalCallException extends System.ApplicationException {
		.fields { externalCall }
	
		.handler public initialize(message, externalCall) {
			load-this
			push-literal "Object can not be cast to specified type."
			push-literal "initialize:1"
			send-message
			
			load-argument externalCall
			store-field externalCall
		}
		
		.handler public external-call() {
			load-field externalCall
			return
		}
	}

	.class public Hashable extends Object {
		.handler public get-hashcode() {
			push-literal "System.NotImplementedException"
			new-instance
			throw
		}
	}
	
	.class public Comparable extends Object {
		.handler public compare-to(other) {
			push-literal "System.NotImplementedException"
			new-instance
			throw			
		}
	}
	
	.class public String extends System.Hashable, System.Comparable {
		.handler public to-string() {
			load-this
			return
		}
		
		.handler public get-hashcode .external System.String.get-hashcode()
		.handler public equals .external System.String.equals(other)
		.handler public compare-to .external System.String.compare-to(other)
		.handler public substring .external System.String.substring(start, count)
		.handler public split .external System.String.split(splitter)
		.handler public index-of .external System.String.index-of(substring)
		.handler public last-index-of .external System.String.last-index-of(substring)
		.handler public concat .external System.String.concat(otherString)
		.handler public length .external System.String.length()
	}
	
	.class public Integer extends System.Hashable, System.Comparable {
		.handler public to-string .external System.Integer.to-string()
		.handler public subtract .external System.Integer.subtract(other)		
		.handler public add .external System.Integer.add(other)
		.handler public multiply .external System.Integer.multiply(other)
		.handler public divide .external System.Integer.divide(other)
		
		.handler public compare-to(other) {
			load-this
			load-argument other
			push-literal "subtract:1"
			send-message 
			return
		}
		
		.handler public negate() {
			push-literal 0
			load-this
			push-literal "compare-to:1"
			send-message
			return
		}
		
		.handler public is-true() {
			load-this
			return
		}			

		.handler public get-hashcode() {
			load-this
			return
		}
	}
	
	.class private Console {
		.handler public write-line .external System.Console.write-line(str)
		.handler public write-line .external System.Console.write-line()
		.handler public write .external System.Console.write(str)
		.handler public read-line .external System.Console.read-line()
	}
	
	.class public Collections {
		.class public List {
			.fields { arr, count, capacity }
			
			.handler public initialize(initialSize) {
				
			}			
		}
	}
	
	.class public Reflection {
		.class public Visibility {
			.fields { vis }
			
			.handler public initialize(vis) {
				load-argument vis
				store-field vis
			}
			
			.handler public is-public() {
				load-field vis
				push-literal 0
				push-literal "equals:1"
				send-message
				return
			}
			
			.handler public is-protected() {
				load-field vis
				push-literal 1
				push-literal "equals:1"
				send-message
				return
			}
			
			.handler public is-private() {
				load-field vis
				push-literal 2
				push-literal "equals:1"
				send-message
				return
			}
					
			.handler public is-none() {
				load-field vis
				push-literal 2
				push-literal "compareTo:1"
				jump-if-true returnTrue
				
				load-field vis
				push-literal 0
				push-literal "compareTo:1"
				jump-if-false returnTrue
				
				push-literal 0
				return
				
				returnTrue:
					push-literal 1
					return
			}
			
			.handler public to-string() {
				load-this
				push-literal "is-public:0"
				send-message
				jump-if-false notPublic
				push-literal "public"
				return
				
				notPublic:
					load-this
					push-literal "is-protected:0"
					send-message
					jump-if-false notProtected
					push-literal "protected"
					return

				notProtected:
					load-this
					push-literal "is-private:0"
					send-message
					jump-if-false notPrivate
					push-literal "private"
					return
					
				notPrivate:
					push-literal "none"
					return
			}
			
			.handler public equals(other) {
				load-field vis
				load-argument other
				push-literal "equals:1"
				send-message
				return
			}
		}
	
		.class public MessageHandler {
			.handler public name .external System.Reflection.MessageHandler.name()
			.handler public argument-count .external System.Reflection.MessageHandler.argument-count()
			.handler public visibility .external System.Reflection.MessageHandler.visibility()
			.handler public is-external .external System.Reflection.MessageHandler.is-external()
			.handler public is-default .external System.Reflection.MessageHandler.is-default()

			.handler public equals .external System.Reflection.MessageHandler.equals(other)
			
			.handler public to-string() {
				load-this
				push-literal "is-external:0"
				send-message
				jump-if-true isExternal

				load-this
				push-literal "is-default:0"
				send-message
				jump-if-true isDefault

				push-literal ".handle "
				load-this
				push-literal "visibility:0"
				send-message
				push-literal "to-string:0"
				send-message
				push-literal "concat:1"
				send-message
				push-literal " "
				push-literal "concat:1"
				send-message
				load-this
				push-literal "name:0"
				send-message
				push-literal 0
				load-this
				push-literal "name:0"
				send-message
				push-literal ":"
				push-literal "index-of:1"
				send-message
				push-literal "substring:2"
				send-message				
				push-literal "concat:1"
				send-message
				jump argumentCount
				
				isExternal:
					push-literal ".external "
					load-this
					push-literal "visibility:0"
					send-message
					push-literal "to-string:0"
					send-message
					push-literal "concat:1"
					send-message
					push-literal " "
					push-literal "concat:1"
					send-message
					load-this
					push-literal "name:0"
					send-message
					push-literal 0
					load-this
					push-literal "name:0"
					send-message
					push-literal ":"
					push-literal "index-of:1"
					send-message
					push-literal "substring:2"
					send-message				
					push-literal "concat:1"
					send-message
					jump argumentCount
					
				isDefault:
					push-literal ".default "
					load-this
					push-literal "visibility:0"
					send-message
					push-literal "to-string:0"
					send-message
					push-literal "concat:1"
					send-message
					jump argumentCount
				
				argumentCount:
					push-literal "("
					push-literal "concat:1"
					send-message
					load-this
					push-literal "argument-count:0"
					send-message
					push-literal "to-string:0"
					send-message
					push-literal "concat:1"
					send-message
					push-literal ")"
					push-literal "concat:1"
					send-message
					return
			}
		}
		
		.class public Class {
			.handler public name .external System.Reflection.Class.name()
			.handler public visibility .external System.Reflection.Class.visibility()
			
			.handler public parent-class .external System.Reflection.Class.parent-class()
			.handler public super-class-names .external System.Reflection.Class.super-class-names()
			.handler public super-classes .external System.Reflection.Class.super-classes()
			.handler public default-message-handler .external System.Reflection.Class.default-message-handler()
			.handler public message-handlers .external System.Reflection.Class.message-handlers()
			.handler public inner-classes .external System.Reflection.Class.inner-classes()
			
			.handler public equals .external System.Reflection.Class.equals(other)
			
			.handler public full-name() {
				load-this
				push-literal "parent-class:0"
				send-message
				dup
				jump-if-false noParent
				
				push-literal "name:0"
				send-message
				load-this
				push-literal "name:0"
				send-message
				push-literal "concat:1"
				send-message
				return
				
				noParent:
					pop
					load-this
					push-literal "name:0"
					send-message
					return
			}
			
			.handler public to-string() {
				.locals { arr, i, length }
				push-literal ".class "
				load-this
				push-literal "visibility:0"
				send-message
				push-literal "to-string:0"
				send-message
				push-literal "concat:1"
				send-message
				push-literal " "
				push-literal "concat:1"
				send-message
				load-this
				push-literal "name:0"
				send-message
				push-literal "concat:1"
				send-message

				push-literal 1
				store-local i
				load-this
				push-literal "super-class-names:0"
				send-message
				store-local arr
				
				load-local arr
				push-literal "length:0"
				send-message 
				dup
				store-local length
				
				jump-if-false end
				
				push-literal " extends "
				push-literal "concat:1"
				send-message 
				load-local arr
				push-literal 0
				push-literal "get:1"
				send-message
				push-literal "concat:1"
				send-message
				
				start:
					load-local length
					load-local i
					push-literal "subtract:1"
					send-message
					jump-if-false end
					
					push-literal ", "
					push-literal "concat:1"
					send-message
					load-local arr
					load-local i
					push-literal "get:1"
					send-message
					push-literal "concat:1"
					send-message
					
					load-local i
					push-literal 1
					push-literal "add:1"
					send-message
					store-local i
					
					jump start
					
				end:

				return
			}
			
			.handler public trace(console) {
				load-this
				load-argument console
				push-literal 0
				push-literal "trace:2"
				send-message
			}
			
			.handler private trace(console, indent) {
				.locals { indent, arr, i, length }
				load-argument indent
				store-local indent
				
				load-this
				load-argument console
				load-argument indent
				push-literal "pad:2"
				send-message
				
				load-argument console
				load-this
				push-literal "to-string:0"
				send-message
				push-literal " {"
				push-literal "concat:1"
				send-message
				push-literal "write-line:1"
				send-message
				
				load-local indent
				push-literal 1
				push-literal "add:1"
				send-message
				store-local indent
				
				load-argument console
				load-this
				push-literal "default-message-handler:0"
				send-message
				jump-if-false noDefaultHandler
				load-this
				load-argument console
				load-local indent
				push-literal "pad:2"
				send-message
				push-literal "to-string:0"
				send-message
				push-literal "write-line:1"
				send-message
				jump messageHandlers
				noDefaultHandler:
					pop
				
				messageHandlers:
					load-this
					push-literal "message-handlers:0"
					send-message
					store-local arr
					push-literal 0
					store-local i
					load-local arr
					push-literal "length:0"
					send-message
					store-local length
					
				messageHandlersStart:
					load-local length
					load-local i
					push-literal "subtract:1"
					send-message
					jump-if-false messageHandlersEnd
				
					load-this
					load-argument console
					load-local indent
					push-literal "pad:2"
					send-message
					load-argument console
					load-local arr
					load-local i
					push-literal "get:1"
					send-message
					push-literal "to-string:0"
					send-message
					push-literal "write-line:1"
					send-message
					
					load-local i
					push-literal 1
					push-literal "add:1"
					send-message
					store-local i
					
					jump messageHandlersStart
					
				messageHandlersEnd:
									
					load-this
					push-literal "inner-classes:0"
					send-message
					store-local arr
					push-literal 0
					store-local i
					load-local arr
					push-literal "length:0"
					send-message
					store-local length
					
				innerClassesStart:
					load-local length
					load-local i
					push-literal "subtract:1"
					send-message
					jump-if-false innerClassesEnd
				
					load-argument console
					push-literal "write-line:0"
					send-message

					load-local arr
					load-local i
					push-literal "get:1"
					send-message
					load-argument console
					load-local indent
					push-literal "trace:2"
					send-message
					
					load-local i
					push-literal 1
					push-literal "add:1"
					send-message
					store-local i
					
					jump innerClassesStart
					
				innerClassesEnd:
				
				load-local indent
				push-literal 1
				push-literal "subtract:1"
				send-message
				store-local indent
				
				load-this
				load-argument console
				load-argument indent
				push-literal "pad:2"
				send-message

				load-argument console
				push-literal "}"
				push-literal "write-line:1"
				send-message
			}
			
			.handler private pad(console, indent) {
				.locals { i }
				push-literal 0
				store-local i
				
				start:
					load-argument indent
					load-local i
					push-literal "subtract:1"
					send-message
					jump-if-false end
					
					load-argument console
					push-literal "  "
					push-literal "write:1"
					send-message
					
					load-local i
					push-literal 1
					push-literal "add:1"
					send-message
					store-local i
					
					jump start
					
				end:
			}
		}
		
		.class public Reflector {
			.handler public classes .external System.Reflection.Reflector.classes()
			.handler public find-class .external System.Reflection.Reflector.find-class(name)
		}
	}
	
	.class public Threading {
		.handler public sleep .external System.Threading.sleep(milis)
		.class public Thread {
			.fields { interpretor }
			
			.handler public start .external System.Threading.Thread.start(obj)
			.handler public join .external System.Threading.Thread.join()
			
			.handler public start() {
				load-this
				dup
				push-literal "start:1"
				send-message
			}
			
			.handler public run() {}
		}
	}
}
